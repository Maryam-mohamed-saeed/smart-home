
first_try.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  00001f06  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008002ec  008002ec  00002226  2**0
                  ALLOC
  3 .stab         000017ac  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e6e  00000000  00000000  000039d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004842  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004982  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000673b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007626  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 09 	call	0x124a	; 0x124a <main>
      8a:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e5       	ldi	r26, 0x53	; 83
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e5       	ldi	r24, 0x53	; 83
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidini>:





void ADC_voidini(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

//Voltage Reference Selections

#if (VOLTAGE_REFERENCE == AVCC)

CLR_BIT(ADC.ADMUX,REFS1);
     b4e:	a4 e2       	ldi	r26, 0x24	; 36
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e4 e2       	ldi	r30, 0x24	; 36
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	83 81       	ldd	r24, Z+3	; 0x03
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	13 96       	adiw	r26, 0x03	; 3
     b5c:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,REFS0);
     b5e:	a4 e2       	ldi	r26, 0x24	; 36
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e4 e2       	ldi	r30, 0x24	; 36
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	83 81       	ldd	r24, Z+3	; 0x03
     b68:	80 64       	ori	r24, 0x40	; 64
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	8c 93       	st	X, r24

SET_BIT(ADC.ADCSRA,ADPS2);

#elif (ADC_PRESCALER==DIVISION_64)

CLR_BIT(ADC.ADCSRA,ADPS0);
     b6e:	a4 e2       	ldi	r26, 0x24	; 36
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e4 e2       	ldi	r30, 0x24	; 36
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	12 96       	adiw	r26, 0x02	; 2
     b7c:	8c 93       	st	X, r24

SET_BIT(ADC.ADCSRA,ADPS1);
     b7e:	a4 e2       	ldi	r26, 0x24	; 36
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e4 e2       	ldi	r30, 0x24	; 36
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	8c 93       	st	X, r24

SET_BIT(ADC.ADCSRA,ADPS2);
     b8e:	a4 e2       	ldi	r26, 0x24	; 36
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e4 e2       	ldi	r30, 0x24	; 36
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	82 81       	ldd	r24, Z+2	; 0x02
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	12 96       	adiw	r26, 0x02	; 2
     b9c:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX, ADLAR);

#elif (ADC_LEFT_ADJUST == DISABLE_LET_ADJUST)

CLR_BIT(ADC.ADMUX, ADLAR);
     b9e:	a4 e2       	ldi	r26, 0x24	; 36
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e4 e2       	ldi	r30, 0x24	; 36
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	83 81       	ldd	r24, Z+3	; 0x03
     ba8:	8f 7d       	andi	r24, 0xDF	; 223
     baa:	13 96       	adiw	r26, 0x03	; 3
     bac:	8c 93       	st	X, r24
     bae:	13 97       	sbiw	r26, 0x03	; 3

#error "you dont select option for ADC Left Adjust Result"

#endif

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_voidEnable>:

void ADC_voidEnable(void){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62

SET_BIT(ADC.ADCSRA,ADEN);
     bbe:	a4 e2       	ldi	r26, 0x24	; 36
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e4 e2       	ldi	r30, 0x24	; 36
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	8c 93       	st	X, r24
     bce:	12 97       	sbiw	r26, 0x02	; 2

}
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <ADC_voidDisable>:

void ADC_voidDisable(void){
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62

CLR_BIT(ADC.ADCSRA,ADEN);
     bde:	a4 e2       	ldi	r26, 0x24	; 36
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e4 e2       	ldi	r30, 0x24	; 36
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	8f 77       	andi	r24, 0x7F	; 127
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	8c 93       	st	X, r24
     bee:	12 97       	sbiw	r26, 0x02	; 2

}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <ADC_u16Conversion>:

u16  ADC_u16Conversion(Channel_T copy_Channel_TMode){
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <ADC_u16Conversion+0x6>
     bfc:	0f 92       	push	r0
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01

switch(copy_Channel_TMode){
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3b 83       	std	Y+3, r19	; 0x03
     c0c:	2a 83       	std	Y+2, r18	; 0x02
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	9b 81       	ldd	r25, Y+3	; 0x03
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <ADC_u16Conversion+0x24>
     c18:	ef c0       	rjmp	.+478    	; 0xdf8 <ADC_u16Conversion+0x202>
     c1a:	2a 81       	ldd	r18, Y+2	; 0x02
     c1c:	3b 81       	ldd	r19, Y+3	; 0x03
     c1e:	25 30       	cpi	r18, 0x05	; 5
     c20:	31 05       	cpc	r19, r1
     c22:	ec f4       	brge	.+58     	; 0xc5e <ADC_u16Conversion+0x68>
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	9b 81       	ldd	r25, Y+3	; 0x03
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <ADC_u16Conversion+0x3a>
     c2e:	66 c0       	rjmp	.+204    	; 0xcfc <ADC_u16Conversion+0x106>
     c30:	2a 81       	ldd	r18, Y+2	; 0x02
     c32:	3b 81       	ldd	r19, Y+3	; 0x03
     c34:	22 30       	cpi	r18, 0x02	; 2
     c36:	31 05       	cpc	r19, r1
     c38:	2c f4       	brge	.+10     	; 0xc44 <ADC_u16Conversion+0x4e>
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	99 f1       	breq	.+102    	; 0xca8 <ADC_u16Conversion+0xb2>
     c42:	d4 c1       	rjmp	.+936    	; 0xfec <ADC_u16Conversion+0x3f6>
     c44:	2a 81       	ldd	r18, Y+2	; 0x02
     c46:	3b 81       	ldd	r19, Y+3	; 0x03
     c48:	22 30       	cpi	r18, 0x02	; 2
     c4a:	31 05       	cpc	r19, r1
     c4c:	09 f4       	brne	.+2      	; 0xc50 <ADC_u16Conversion+0x5a>
     c4e:	80 c0       	rjmp	.+256    	; 0xd50 <ADC_u16Conversion+0x15a>
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	9b 81       	ldd	r25, Y+3	; 0x03
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	91 05       	cpc	r25, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <ADC_u16Conversion+0x66>
     c5a:	a4 c0       	rjmp	.+328    	; 0xda4 <ADC_u16Conversion+0x1ae>
     c5c:	c7 c1       	rjmp	.+910    	; 0xfec <ADC_u16Conversion+0x3f6>
     c5e:	2a 81       	ldd	r18, Y+2	; 0x02
     c60:	3b 81       	ldd	r19, Y+3	; 0x03
     c62:	27 30       	cpi	r18, 0x07	; 7
     c64:	31 05       	cpc	r19, r1
     c66:	09 f4       	brne	.+2      	; 0xc6a <ADC_u16Conversion+0x74>
     c68:	45 c1       	rjmp	.+650    	; 0xef4 <ADC_u16Conversion+0x2fe>
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
     c6e:	88 30       	cpi	r24, 0x08	; 8
     c70:	91 05       	cpc	r25, r1
     c72:	6c f4       	brge	.+26     	; 0xc8e <ADC_u16Conversion+0x98>
     c74:	2a 81       	ldd	r18, Y+2	; 0x02
     c76:	3b 81       	ldd	r19, Y+3	; 0x03
     c78:	25 30       	cpi	r18, 0x05	; 5
     c7a:	31 05       	cpc	r19, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <ADC_u16Conversion+0x8a>
     c7e:	e6 c0       	rjmp	.+460    	; 0xe4c <ADC_u16Conversion+0x256>
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	86 30       	cpi	r24, 0x06	; 6
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <ADC_u16Conversion+0x96>
     c8a:	0a c1       	rjmp	.+532    	; 0xea0 <ADC_u16Conversion+0x2aa>
     c8c:	af c1       	rjmp	.+862    	; 0xfec <ADC_u16Conversion+0x3f6>
     c8e:	2a 81       	ldd	r18, Y+2	; 0x02
     c90:	3b 81       	ldd	r19, Y+3	; 0x03
     c92:	28 30       	cpi	r18, 0x08	; 8
     c94:	31 05       	cpc	r19, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <ADC_u16Conversion+0xa4>
     c98:	57 c1       	rjmp	.+686    	; 0xf48 <ADC_u16Conversion+0x352>
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	89 30       	cpi	r24, 0x09	; 9
     ca0:	91 05       	cpc	r25, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <ADC_u16Conversion+0xb0>
     ca4:	7b c1       	rjmp	.+758    	; 0xf9c <ADC_u16Conversion+0x3a6>
     ca6:	a2 c1       	rjmp	.+836    	; 0xfec <ADC_u16Conversion+0x3f6>

case ADC0:

CLR_BIT(ADC.ADMUX,MUX0);
     ca8:	a4 e2       	ldi	r26, 0x24	; 36
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e4 e2       	ldi	r30, 0x24	; 36
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	83 81       	ldd	r24, Z+3	; 0x03
     cb2:	8e 7f       	andi	r24, 0xFE	; 254
     cb4:	13 96       	adiw	r26, 0x03	; 3
     cb6:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX1);
     cb8:	a4 e2       	ldi	r26, 0x24	; 36
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e4 e2       	ldi	r30, 0x24	; 36
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	83 81       	ldd	r24, Z+3	; 0x03
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX2);
     cc8:	a4 e2       	ldi	r26, 0x24	; 36
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e4 e2       	ldi	r30, 0x24	; 36
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	83 81       	ldd	r24, Z+3	; 0x03
     cd2:	8b 7f       	andi	r24, 0xFB	; 251
     cd4:	13 96       	adiw	r26, 0x03	; 3
     cd6:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     cd8:	a4 e2       	ldi	r26, 0x24	; 36
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e4 e2       	ldi	r30, 0x24	; 36
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	83 81       	ldd	r24, Z+3	; 0x03
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	13 96       	adiw	r26, 0x03	; 3
     ce6:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     ce8:	a4 e2       	ldi	r26, 0x24	; 36
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e4 e2       	ldi	r30, 0x24	; 36
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	8c 93       	st	X, r24
     cf8:	13 97       	sbiw	r26, 0x03	; 3
     cfa:	78 c1       	rjmp	.+752    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC1:

SET_BIT(ADC.ADMUX,MUX0);
     cfc:	a4 e2       	ldi	r26, 0x24	; 36
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e4 e2       	ldi	r30, 0x24	; 36
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	83 81       	ldd	r24, Z+3	; 0x03
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	13 96       	adiw	r26, 0x03	; 3
     d0a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX1);
     d0c:	a4 e2       	ldi	r26, 0x24	; 36
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e4 e2       	ldi	r30, 0x24	; 36
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	83 81       	ldd	r24, Z+3	; 0x03
     d16:	8d 7f       	andi	r24, 0xFD	; 253
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX2);
     d1c:	a4 e2       	ldi	r26, 0x24	; 36
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e4 e2       	ldi	r30, 0x24	; 36
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	83 81       	ldd	r24, Z+3	; 0x03
     d26:	8b 7f       	andi	r24, 0xFB	; 251
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     d2c:	a4 e2       	ldi	r26, 0x24	; 36
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e4 e2       	ldi	r30, 0x24	; 36
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	83 81       	ldd	r24, Z+3	; 0x03
     d36:	87 7f       	andi	r24, 0xF7	; 247
     d38:	13 96       	adiw	r26, 0x03	; 3
     d3a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     d3c:	a4 e2       	ldi	r26, 0x24	; 36
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e4 e2       	ldi	r30, 0x24	; 36
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	83 81       	ldd	r24, Z+3	; 0x03
     d46:	8f 7e       	andi	r24, 0xEF	; 239
     d48:	13 96       	adiw	r26, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	13 97       	sbiw	r26, 0x03	; 3
     d4e:	4e c1       	rjmp	.+668    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC2:

CLR_BIT(ADC.ADMUX,MUX0);
     d50:	a4 e2       	ldi	r26, 0x24	; 36
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e4 e2       	ldi	r30, 0x24	; 36
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	83 81       	ldd	r24, Z+3	; 0x03
     d5a:	8e 7f       	andi	r24, 0xFE	; 254
     d5c:	13 96       	adiw	r26, 0x03	; 3
     d5e:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX1);
     d60:	a4 e2       	ldi	r26, 0x24	; 36
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e4 e2       	ldi	r30, 0x24	; 36
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	83 81       	ldd	r24, Z+3	; 0x03
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX2);
     d70:	a4 e2       	ldi	r26, 0x24	; 36
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e4 e2       	ldi	r30, 0x24	; 36
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	83 81       	ldd	r24, Z+3	; 0x03
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     d80:	a4 e2       	ldi	r26, 0x24	; 36
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e4 e2       	ldi	r30, 0x24	; 36
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	83 81       	ldd	r24, Z+3	; 0x03
     d8a:	87 7f       	andi	r24, 0xF7	; 247
     d8c:	13 96       	adiw	r26, 0x03	; 3
     d8e:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     d90:	a4 e2       	ldi	r26, 0x24	; 36
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e4 e2       	ldi	r30, 0x24	; 36
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	83 81       	ldd	r24, Z+3	; 0x03
     d9a:	8f 7e       	andi	r24, 0xEF	; 239
     d9c:	13 96       	adiw	r26, 0x03	; 3
     d9e:	8c 93       	st	X, r24
     da0:	13 97       	sbiw	r26, 0x03	; 3
     da2:	24 c1       	rjmp	.+584    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC3:

SET_BIT(ADC.ADMUX,MUX0);
     da4:	a4 e2       	ldi	r26, 0x24	; 36
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e4 e2       	ldi	r30, 0x24	; 36
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	83 81       	ldd	r24, Z+3	; 0x03
     dae:	81 60       	ori	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX1);
     db4:	a4 e2       	ldi	r26, 0x24	; 36
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e4 e2       	ldi	r30, 0x24	; 36
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	83 81       	ldd	r24, Z+3	; 0x03
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX2);
     dc4:	a4 e2       	ldi	r26, 0x24	; 36
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e4 e2       	ldi	r30, 0x24	; 36
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	83 81       	ldd	r24, Z+3	; 0x03
     dce:	8b 7f       	andi	r24, 0xFB	; 251
     dd0:	13 96       	adiw	r26, 0x03	; 3
     dd2:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     dd4:	a4 e2       	ldi	r26, 0x24	; 36
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e4 e2       	ldi	r30, 0x24	; 36
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	83 81       	ldd	r24, Z+3	; 0x03
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	13 96       	adiw	r26, 0x03	; 3
     de2:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     de4:	a4 e2       	ldi	r26, 0x24	; 36
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e2       	ldi	r30, 0x24	; 36
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	83 81       	ldd	r24, Z+3	; 0x03
     dee:	8f 7e       	andi	r24, 0xEF	; 239
     df0:	13 96       	adiw	r26, 0x03	; 3
     df2:	8c 93       	st	X, r24
     df4:	13 97       	sbiw	r26, 0x03	; 3
     df6:	fa c0       	rjmp	.+500    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC4:

CLR_BIT(ADC.ADMUX,MUX0);
     df8:	a4 e2       	ldi	r26, 0x24	; 36
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e2       	ldi	r30, 0x24	; 36
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	8e 7f       	andi	r24, 0xFE	; 254
     e04:	13 96       	adiw	r26, 0x03	; 3
     e06:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX1);
     e08:	a4 e2       	ldi	r26, 0x24	; 36
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e4 e2       	ldi	r30, 0x24	; 36
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	83 81       	ldd	r24, Z+3	; 0x03
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX2);
     e18:	a4 e2       	ldi	r26, 0x24	; 36
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e4 e2       	ldi	r30, 0x24	; 36
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	83 81       	ldd	r24, Z+3	; 0x03
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	13 96       	adiw	r26, 0x03	; 3
     e26:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     e28:	a4 e2       	ldi	r26, 0x24	; 36
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e4 e2       	ldi	r30, 0x24	; 36
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	83 81       	ldd	r24, Z+3	; 0x03
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	13 96       	adiw	r26, 0x03	; 3
     e36:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     e38:	a4 e2       	ldi	r26, 0x24	; 36
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e2       	ldi	r30, 0x24	; 36
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	83 81       	ldd	r24, Z+3	; 0x03
     e42:	8f 7e       	andi	r24, 0xEF	; 239
     e44:	13 96       	adiw	r26, 0x03	; 3
     e46:	8c 93       	st	X, r24
     e48:	13 97       	sbiw	r26, 0x03	; 3
     e4a:	d0 c0       	rjmp	.+416    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC5:

SET_BIT(ADC.ADMUX,MUX0);
     e4c:	a4 e2       	ldi	r26, 0x24	; 36
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e4 e2       	ldi	r30, 0x24	; 36
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	83 81       	ldd	r24, Z+3	; 0x03
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX1);
     e5c:	a4 e2       	ldi	r26, 0x24	; 36
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e4 e2       	ldi	r30, 0x24	; 36
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	83 81       	ldd	r24, Z+3	; 0x03
     e66:	8d 7f       	andi	r24, 0xFD	; 253
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX2);
     e6c:	a4 e2       	ldi	r26, 0x24	; 36
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e4 e2       	ldi	r30, 0x24	; 36
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	83 81       	ldd	r24, Z+3	; 0x03
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	13 96       	adiw	r26, 0x03	; 3
     e7a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     e7c:	a4 e2       	ldi	r26, 0x24	; 36
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e2       	ldi	r30, 0x24	; 36
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	83 81       	ldd	r24, Z+3	; 0x03
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     e8c:	a4 e2       	ldi	r26, 0x24	; 36
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e2       	ldi	r30, 0x24	; 36
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	83 81       	ldd	r24, Z+3	; 0x03
     e96:	8f 7e       	andi	r24, 0xEF	; 239
     e98:	13 96       	adiw	r26, 0x03	; 3
     e9a:	8c 93       	st	X, r24
     e9c:	13 97       	sbiw	r26, 0x03	; 3
     e9e:	a6 c0       	rjmp	.+332    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC6:

CLR_BIT(ADC.ADMUX,MUX0);
     ea0:	a4 e2       	ldi	r26, 0x24	; 36
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e4 e2       	ldi	r30, 0x24	; 36
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	83 81       	ldd	r24, Z+3	; 0x03
     eaa:	8e 7f       	andi	r24, 0xFE	; 254
     eac:	13 96       	adiw	r26, 0x03	; 3
     eae:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX1);
     eb0:	a4 e2       	ldi	r26, 0x24	; 36
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e4 e2       	ldi	r30, 0x24	; 36
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	83 81       	ldd	r24, Z+3	; 0x03
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	13 96       	adiw	r26, 0x03	; 3
     ebe:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX2);
     ec0:	a4 e2       	ldi	r26, 0x24	; 36
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e4 e2       	ldi	r30, 0x24	; 36
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	84 60       	ori	r24, 0x04	; 4
     ecc:	13 96       	adiw	r26, 0x03	; 3
     ece:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     ed0:	a4 e2       	ldi	r26, 0x24	; 36
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e4 e2       	ldi	r30, 0x24	; 36
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	83 81       	ldd	r24, Z+3	; 0x03
     eda:	87 7f       	andi	r24, 0xF7	; 247
     edc:	13 96       	adiw	r26, 0x03	; 3
     ede:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     ee0:	a4 e2       	ldi	r26, 0x24	; 36
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e4 e2       	ldi	r30, 0x24	; 36
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	83 81       	ldd	r24, Z+3	; 0x03
     eea:	8f 7e       	andi	r24, 0xEF	; 239
     eec:	13 96       	adiw	r26, 0x03	; 3
     eee:	8c 93       	st	X, r24
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	7c c0       	rjmp	.+248    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC7:

SET_BIT(ADC.ADMUX,MUX0);
     ef4:	a4 e2       	ldi	r26, 0x24	; 36
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e4 e2       	ldi	r30, 0x24	; 36
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	83 81       	ldd	r24, Z+3	; 0x03
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	13 96       	adiw	r26, 0x03	; 3
     f02:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX1);
     f04:	a4 e2       	ldi	r26, 0x24	; 36
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e4 e2       	ldi	r30, 0x24	; 36
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX2);
     f14:	a4 e2       	ldi	r26, 0x24	; 36
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e2       	ldi	r30, 0x24	; 36
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	84 60       	ori	r24, 0x04	; 4
     f20:	13 96       	adiw	r26, 0x03	; 3
     f22:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     f24:	a4 e2       	ldi	r26, 0x24	; 36
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e4 e2       	ldi	r30, 0x24	; 36
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	83 81       	ldd	r24, Z+3	; 0x03
     f2e:	87 7f       	andi	r24, 0xF7	; 247
     f30:	13 96       	adiw	r26, 0x03	; 3
     f32:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX4);
     f34:	a4 e2       	ldi	r26, 0x24	; 36
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e4 e2       	ldi	r30, 0x24	; 36
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	83 81       	ldd	r24, Z+3	; 0x03
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	13 96       	adiw	r26, 0x03	; 3
     f42:	8c 93       	st	X, r24
     f44:	13 97       	sbiw	r26, 0x03	; 3
     f46:	52 c0       	rjmp	.+164    	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC1_ADC2:

SET_BIT(ADC.ADMUX,MUX0);
     f48:	a4 e2       	ldi	r26, 0x24	; 36
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e2       	ldi	r30, 0x24	; 36
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	83 81       	ldd	r24, Z+3	; 0x03
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	13 96       	adiw	r26, 0x03	; 3
     f56:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX1);
     f58:	a4 e2       	ldi	r26, 0x24	; 36
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e4 e2       	ldi	r30, 0x24	; 36
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	83 81       	ldd	r24, Z+3	; 0x03
     f62:	8d 7f       	andi	r24, 0xFD	; 253
     f64:	13 96       	adiw	r26, 0x03	; 3
     f66:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX2);
     f68:	a4 e2       	ldi	r26, 0x24	; 36
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e4 e2       	ldi	r30, 0x24	; 36
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	83 81       	ldd	r24, Z+3	; 0x03
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	13 96       	adiw	r26, 0x03	; 3
     f76:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX3);
     f78:	a4 e2       	ldi	r26, 0x24	; 36
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e4 e2       	ldi	r30, 0x24	; 36
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	83 81       	ldd	r24, Z+3	; 0x03
     f82:	88 60       	ori	r24, 0x08	; 8
     f84:	13 96       	adiw	r26, 0x03	; 3
     f86:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX4);
     f88:	a4 e2       	ldi	r26, 0x24	; 36
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e2       	ldi	r30, 0x24	; 36
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	83 81       	ldd	r24, Z+3	; 0x03
     f92:	80 61       	ori	r24, 0x10	; 16
     f94:	13 96       	adiw	r26, 0x03	; 3
     f96:	8c 93       	st	X, r24
     f98:	13 97       	sbiw	r26, 0x03	; 3
     f9a:	28 c0       	rjmp	.+80     	; 0xfec <ADC_u16Conversion+0x3f6>

break;

case ADC2_ADC1:

CLR_BIT(ADC.ADMUX,MUX0);
     f9c:	a4 e2       	ldi	r26, 0x24	; 36
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e4 e2       	ldi	r30, 0x24	; 36
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	83 81       	ldd	r24, Z+3	; 0x03
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	13 96       	adiw	r26, 0x03	; 3
     faa:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX1);
     fac:	a4 e2       	ldi	r26, 0x24	; 36
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e2       	ldi	r30, 0x24	; 36
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	83 81       	ldd	r24, Z+3	; 0x03
     fb6:	82 60       	ori	r24, 0x02	; 2
     fb8:	13 96       	adiw	r26, 0x03	; 3
     fba:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX2);
     fbc:	a4 e2       	ldi	r26, 0x24	; 36
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e4 e2       	ldi	r30, 0x24	; 36
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	83 81       	ldd	r24, Z+3	; 0x03
     fc6:	8b 7f       	andi	r24, 0xFB	; 251
     fc8:	13 96       	adiw	r26, 0x03	; 3
     fca:	8c 93       	st	X, r24

CLR_BIT(ADC.ADMUX,MUX3);
     fcc:	a4 e2       	ldi	r26, 0x24	; 36
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e2       	ldi	r30, 0x24	; 36
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	83 81       	ldd	r24, Z+3	; 0x03
     fd6:	87 7f       	andi	r24, 0xF7	; 247
     fd8:	13 96       	adiw	r26, 0x03	; 3
     fda:	8c 93       	st	X, r24

SET_BIT(ADC.ADMUX,MUX4);
     fdc:	a4 e2       	ldi	r26, 0x24	; 36
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e2       	ldi	r30, 0x24	; 36
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	83 81       	ldd	r24, Z+3	; 0x03
     fe6:	80 61       	ori	r24, 0x10	; 16
     fe8:	13 96       	adiw	r26, 0x03	; 3
     fea:	8c 93       	st	X, r24

break;

}

SET_BIT(ADC.ADCSRA,ADSC);
     fec:	a4 e2       	ldi	r26, 0x24	; 36
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e2       	ldi	r30, 0x24	; 36
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	8c 93       	st	X, r24
     ffc:	12 97       	sbiw	r26, 0x02	; 2

while(GET_BIT(ADC.ADCSRA, ADIF)==0);
     ffe:	e4 e2       	ldi	r30, 0x24	; 36
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	82 95       	swap	r24
    1006:	8f 70       	andi	r24, 0x0F	; 15
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	81 70       	andi	r24, 0x01	; 1
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	a9 f3       	breq	.-22     	; 0xffe <ADC_u16Conversion+0x408>

SET_BIT(ADC.ADCSRA, ADIF);
    1014:	a4 e2       	ldi	r26, 0x24	; 36
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e4 e2       	ldi	r30, 0x24	; 36
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	80 61       	ori	r24, 0x10	; 16
    1020:	12 96       	adiw	r26, 0x02	; 2
    1022:	8c 93       	st	X, r24
    1024:	12 97       	sbiw	r26, 0x02	; 2

return (ADC.ADCD);
    1026:	e4 e2       	ldi	r30, 0x24	; 36
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01

}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <control_light>:

#define LIGHT_PIN 0
#define DOOR_PIN 1
#define ALARM_PIN 2

void control_light(int state) {
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <control_light+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    if (state) {
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	61 f0       	breq	.+24     	; 0x1068 <control_light+0x2e>
        PORTB |= (1 << LIGHT_PIN); // Turn light on
    1050:	a8 e3       	ldi	r26, 0x38	; 56
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e3       	ldi	r30, 0x38	; 56
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	8c 93       	st	X, r24
        UART_TransmitString("light is on ");
    105e:	80 e6       	ldi	r24, 0x60	; 96
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    1066:	0b c0       	rjmp	.+22     	; 0x107e <control_light+0x44>
    } else {
        PORTB &= ~(1 << LIGHT_PIN); // Turn light off
    1068:	a8 e3       	ldi	r26, 0x38	; 56
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e8 e3       	ldi	r30, 0x38	; 56
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8e 7f       	andi	r24, 0xFE	; 254
    1074:	8c 93       	st	X, r24
        UART_TransmitString("light is off ");
    1076:	8d e6       	ldi	r24, 0x6D	; 109
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    }
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <control_door>:

void control_door(int state) {
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <control_door+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
    if (state) {
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 f0       	breq	.+24     	; 0x10b6 <control_door+0x2e>
        PORTB |= (1 << DOOR_PIN); // Open door
    109e:	a8 e3       	ldi	r26, 0x38	; 56
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e8 e3       	ldi	r30, 0x38	; 56
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	8c 93       	st	X, r24
        UART_TransmitString("the door is open ");
    10ac:	8b e7       	ldi	r24, 0x7B	; 123
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    10b4:	0b c0       	rjmp	.+22     	; 0x10cc <control_door+0x44>
    } else {
        PORTB &= ~(1 << DOOR_PIN); // Close door
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8d 7f       	andi	r24, 0xFD	; 253
    10c2:	8c 93       	st	X, r24
        UART_TransmitString("the door is closed");
    10c4:	8d e8       	ldi	r24, 0x8D	; 141
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    }
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <activate_alarm>:

void activate_alarm() {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << ALARM_PIN); // Activate alarm
    10de:	a8 e3       	ldi	r26, 0x38	; 56
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	84 60       	ori	r24, 0x04	; 4
    10ea:	8c 93       	st	X, r24
   /* _delay_ms(5000); // Alarm duration
    PORTB &= ~(1 << ALARM_PIN); // Deactivate alarm*/
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <authenticate>:
    {"user1", "password1"},
    {"user2", "password2"},
    // Add more users as needed
};

int authenticate(char* username, char* password) {
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	28 97       	sbiw	r28, 0x08	; 8
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	8b 83       	std	Y+3, r24	; 0x03
    110a:	7e 83       	std	Y+6, r23	; 0x06
    110c:	6d 83       	std	Y+5, r22	; 0x05
    for (int i = 0; i < MAX_USERS; i++) {
    110e:	1a 82       	std	Y+2, r1	; 0x02
    1110:	19 82       	std	Y+1, r1	; 0x01
    1112:	3b c0       	rjmp	.+118    	; 0x118a <authenticate+0x98>
        if ((strcmp(users[i].username, username) == 0) && (strcmp(users[i].password, password) == 0)) {
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	9c 01       	movw	r18, r24
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	82 0f       	add	r24, r18
    1130:	93 1f       	adc	r25, r19
    1132:	85 5a       	subi	r24, 0xA5	; 165
    1134:	9e 4f       	sbci	r25, 0xFE	; 254
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	b9 01       	movw	r22, r18
    113c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <strcmp>
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	f1 f4       	brne	.+60     	; 0x1180 <authenticate+0x8e>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	9c 01       	movw	r18, r24
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	82 0f       	add	r24, r18
    1160:	93 1f       	adc	r25, r19
    1162:	44 96       	adiw	r24, 0x14	; 20
    1164:	85 5a       	subi	r24, 0xA5	; 165
    1166:	9e 4f       	sbci	r25, 0xFE	; 254
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	b9 01       	movw	r22, r18
    116e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <strcmp>
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	29 f4       	brne	.+10     	; 0x1180 <authenticate+0x8e>
            return 1; // Success
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	98 87       	std	Y+8, r25	; 0x08
    117c:	8f 83       	std	Y+7, r24	; 0x07
    117e:	0d c0       	rjmp	.+26     	; 0x119a <authenticate+0xa8>
    {"user2", "password2"},
    // Add more users as needed
};

int authenticate(char* username, char* password) {
    for (int i = 0; i < MAX_USERS; i++) {
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	8a 30       	cpi	r24, 0x0A	; 10
    1190:	91 05       	cpc	r25, r1
    1192:	0c f4       	brge	.+2      	; 0x1196 <authenticate+0xa4>
    1194:	bf cf       	rjmp	.-130    	; 0x1114 <authenticate+0x22>
        if ((strcmp(users[i].username, username) == 0) && (strcmp(users[i].password, password) == 0)) {
            return 1; // Success
        }
    }
    return 0; // Failure
    1196:	18 86       	std	Y+8, r1	; 0x08
    1198:	1f 82       	std	Y+7, r1	; 0x07
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	98 85       	ldd	r25, Y+8	; 0x08
}
    119e:	28 96       	adiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <eeprom_read>:
#include "eeprom.h"
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

u8 eeprom_read(u16 address) {
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <eeprom_read+0x6>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    // Set up address register
    EEAR = address;
    11be:	ee e3       	ldi	r30, 0x3E	; 62
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24

    // Start EEPROM read by writing EERE
    SET_BIT(EECR,EERE);
    11ca:	ac e3       	ldi	r26, 0x3C	; 60
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ec e3       	ldi	r30, 0x3C	; 60
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	8c 93       	st	X, r24

    // Return the data from the data register
    return EEDR;
    11d8:	ed e3       	ldi	r30, 0x3D	; 61
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <eeprom_write>:


void eeprom_write(u16 address, u8 data) {
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <eeprom_write+0x6>
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6b 83       	std	Y+3, r22	; 0x03
    // Wait for completion of previous write
    while ( GET_BIT(EECR,EEWE));
    11fa:	ec e3       	ldi	r30, 0x3C	; 60
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	86 95       	lsr	r24
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	81 70       	andi	r24, 0x01	; 1
    1208:	90 70       	andi	r25, 0x00	; 0
    120a:	88 23       	and	r24, r24
    120c:	b1 f7       	brne	.-20     	; 0x11fa <eeprom_write+0x12>

    // Set address and data
    EEAR = address;
    120e:	ee e3       	ldi	r30, 0x3E	; 62
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    EEDR = data;
    121a:	ed e3       	ldi	r30, 0x3D	; 61
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	80 83       	st	Z, r24

    // Enable EEPROM master write
    SET_BIT(EECR,EEMWE);
    1222:	ac e3       	ldi	r26, 0x3C	; 60
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ec e3       	ldi	r30, 0x3C	; 60
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	84 60       	ori	r24, 0x04	; 4
    122e:	8c 93       	st	X, r24
    // Start EEPROM write
    SET_BIT(EECR,EEWE);
    1230:	ac e3       	ldi	r26, 0x3C	; 60
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ec e3       	ldi	r30, 0x3C	; 60
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	8c 93       	st	X, r24
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <main>:

uint8_t map_adc_to_pwm(uint16_t adc_value);
volatile uint8_t fan_speed = 0;


int main(void) {
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	c0 54       	subi	r28, 0x40	; 64
    1254:	d0 40       	sbci	r29, 0x00	; 0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    char username[USERNAME_LENGTH];
    char password[PASSWORD_LENGTH];
    u16 conv_value=0;
    1260:	1e 8a       	std	Y+22, r1	; 0x16
    1262:	1d 8a       	std	Y+21, r1	; 0x15
    u16 temp_val;
    int attempts = 0;
    1264:	1a 8a       	std	Y+18, r1	; 0x12
    1266:	19 8a       	std	Y+17, r1	; 0x11
//initialize adc
    CLR_BIT(DDRA,PIN0);
    1268:	aa e3       	ldi	r26, 0x3A	; 58
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	8c 93       	st	X, r24
    ADC_voidini();
    1276:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidini>
    ADC_voidEnable();
    127a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_voidEnable>
    SET_BIT(DDRD,PIN7);
    127e:	a1 e3       	ldi	r26, 0x31	; 49
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	8c 93       	st	X, r24

    pwm_init();
    128c:	0e 94 49 0b 	call	0x1692	; 0x1692 <pwm_init>


    // Initialize UART and GPIO
    UART_Ini();
    1290:	0e 94 91 0b 	call	0x1722	; 0x1722 <UART_Ini>
    DDRB = (1 << LIGHT_PIN) | (1 << DOOR_PIN) | (1 << ALARM_PIN); // Set pins as output
    1294:	e7 e3       	ldi	r30, 0x37	; 55
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	87 e0       	ldi	r24, 0x07	; 7
    129a:	80 83       	st	Z, r24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a8 ec       	ldi	r26, 0xC8	; 200
    12a2:	b3 e4       	ldi	r27, 0x43	; 67
    12a4:	8b 87       	std	Y+11, r24	; 0x0b
    12a6:	9c 87       	std	Y+12, r25	; 0x0c
    12a8:	ad 87       	std	Y+13, r26	; 0x0d
    12aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	4a e7       	ldi	r20, 0x7A	; 122
    12ba:	55 e4       	ldi	r21, 0x45	; 69
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	8f 83       	std	Y+7, r24	; 0x07
    12c6:	98 87       	std	Y+8, r25	; 0x08
    12c8:	a9 87       	std	Y+9, r26	; 0x09
    12ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e8       	ldi	r20, 0x80	; 128
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	2c f4       	brge	.+10     	; 0x12ee <main+0xa4>
		__ticks = 1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	3f c0       	rjmp	.+126    	; 0x136c <main+0x122>
	else if (__tmp > 65535)
    12ee:	6f 81       	ldd	r22, Y+7	; 0x07
    12f0:	78 85       	ldd	r23, Y+8	; 0x08
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	4f e7       	ldi	r20, 0x7F	; 127
    12fc:	57 e4       	ldi	r21, 0x47	; 71
    12fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1302:	18 16       	cp	r1, r24
    1304:	4c f5       	brge	.+82     	; 0x1358 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1306:	6b 85       	ldd	r22, Y+11	; 0x0b
    1308:	7c 85       	ldd	r23, Y+12	; 0x0c
    130a:	8d 85       	ldd	r24, Y+13	; 0x0d
    130c:	9e 85       	ldd	r25, Y+14	; 0x0e
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e2       	ldi	r20, 0x20	; 32
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	0f c0       	rjmp	.+30     	; 0x134e <main+0x104>
    1330:	80 e9       	ldi	r24, 0x90	; 144
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <main+0xf2>
    1340:	9c 83       	std	Y+4, r25	; 0x04
    1342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	9e 83       	std	Y+6, r25	; 0x06
    134c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	69 f7       	brne	.-38     	; 0x1330 <main+0xe6>
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1358:	6f 81       	ldd	r22, Y+7	; 0x07
    135a:	78 85       	ldd	r23, Y+8	; 0x08
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <main+0x12e>
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01

    while (1) {
    	_delay_ms(400);
    	 UART_TransmitString("temp: ");
    1380:	80 ea       	ldi	r24, 0xA0	; 160
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    	  conv_value=ADC_u16Conversion(ADC0);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <ADC_u16Conversion>
    138e:	9e 8b       	std	Y+22, r25	; 0x16
    1390:	8d 8b       	std	Y+21, r24	; 0x15
    	  temp_val=(conv_value* 500UL)/1024;
    1392:	8d 89       	ldd	r24, Y+21	; 0x15
    1394:	9e 89       	ldd	r25, Y+22	; 0x16
    1396:	cc 01       	movw	r24, r24
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	24 ef       	ldi	r18, 0xF4	; 244
    139e:	31 e0       	ldi	r19, 0x01	; 1
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsi3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	07 2e       	mov	r0, r23
    13b2:	7a e0       	ldi	r23, 0x0A	; 10
    13b4:	b6 95       	lsr	r27
    13b6:	a7 95       	ror	r26
    13b8:	97 95       	ror	r25
    13ba:	87 95       	ror	r24
    13bc:	7a 95       	dec	r23
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <main+0x16a>
    13c0:	70 2d       	mov	r23, r0
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
    	  uart_print("\r\n");
    13c6:	87 ea       	ldi	r24, 0xA7	; 167
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <uart_print>

    	  uart_print_number(temp_val);
    13ce:	8b 89       	ldd	r24, Y+19	; 0x13
    13d0:	9c 89       	ldd	r25, Y+20	; 0x14
    13d2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <uart_print_number>
    	  uart_print("%\r\n");
    13d6:	8a ea       	ldi	r24, 0xAA	; 170
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <uart_print>
    	  if (temp_val> 25) {
    13de:	8b 89       	ldd	r24, Y+19	; 0x13
    13e0:	9c 89       	ldd	r25, Y+20	; 0x14
    13e2:	8a 31       	cpi	r24, 0x1A	; 26
    13e4:	91 05       	cpc	r25, r1
    13e6:	e0 f0       	brcs	.+56     	; 0x1420 <main+0x1d6>
    	                uint8_t pwm_value = (uint8_t)((temp_val- 25) * 612 /10); // Adjust as needed
    13e8:	2b 89       	ldd	r18, Y+19	; 0x13
    13ea:	3c 89       	ldd	r19, Y+20	; 0x14
    13ec:	84 e6       	ldi	r24, 0x64	; 100
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	ac 01       	movw	r20, r24
    13f2:	24 9f       	mul	r18, r20
    13f4:	c0 01       	movw	r24, r0
    13f6:	25 9f       	mul	r18, r21
    13f8:	90 0d       	add	r25, r0
    13fa:	34 9f       	mul	r19, r20
    13fc:	90 0d       	add	r25, r0
    13fe:	11 24       	eor	r1, r1
    1400:	84 5c       	subi	r24, 0xC4	; 196
    1402:	9b 43       	sbci	r25, 0x3B	; 59
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	b9 01       	movw	r22, r18
    140a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__udivmodhi4>
    140e:	cb 01       	movw	r24, r22
    1410:	88 8b       	std	Y+16, r24	; 0x10
    	                set_fan_speed(pwm_value); // Set the PWM duty cycle based on the temperature
    1412:	88 89       	ldd	r24, Y+16	; 0x10
    1414:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <set_fan_speed>
    	                if (pwm_value > 255)
    	                	pwm_value = 255;
    	                set_fan_speed(pwm_value); // Set the PWM duty cycle based on the temperature
    1418:	88 89       	ldd	r24, Y+16	; 0x10
    141a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <set_fan_speed>
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <main+0x1dc>
    	            }
    	  else {
    	                set_fan_speed(0); // Turn off fan if temperature is at or below 25
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <set_fan_speed>
    	            }
    	UART_TransmitString("Enter Username: ");
    1426:	8e ea       	ldi	r24, 0xAE	; 174
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    	 UART_ReceiveString(username, USERNAME_LENGTH); // Receive username
    142e:	ce 01       	movw	r24, r28
    1430:	47 96       	adiw	r24, 0x17	; 23
    1432:	64 e1       	ldi	r22, 0x14	; 20
    1434:	0e 94 9a 0a 	call	0x1534	; 0x1534 <UART_ReceiveString>

        UART_TransmitString("Enter Password: ");
    1438:	8f eb       	ldi	r24, 0xBF	; 191
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
        UART_ReceiveString(password, PASSWORD_LENGTH); // Receive password
    1440:	ce 01       	movw	r24, r28
    1442:	8b 96       	adiw	r24, 0x2b	; 43
    1444:	64 e1       	ldi	r22, 0x14	; 20
    1446:	0e 94 9a 0a 	call	0x1534	; 0x1534 <UART_ReceiveString>


        if (authenticate(username, password)) {
    144a:	ce 01       	movw	r24, r28
    144c:	47 96       	adiw	r24, 0x17	; 23
    144e:	9e 01       	movw	r18, r28
    1450:	25 5d       	subi	r18, 0xD5	; 213
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	b9 01       	movw	r22, r18
    1456:	0e 94 79 08 	call	0x10f2	; 0x10f2 <authenticate>
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	09 f4       	brne	.+2      	; 0x1460 <main+0x216>
    145e:	56 c0       	rjmp	.+172    	; 0x150c <main+0x2c2>
        	UART_TransmitString("Login Successful\r\n");
    1460:	80 ed       	ldi	r24, 0xD0	; 208
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
            attempts = 0; // Reset attempts on successful login
    1468:	1a 8a       	std	Y+18, r1	; 0x12
    146a:	19 8a       	std	Y+17, r1	; 0x11

            // Process further commands
            char command;
            UART_TransmitString("Enter Command (1: Light ON, 0: Light OFF, 2: Open Door, 3: Close Door) \r\n");
    146c:	83 ee       	ldi	r24, 0xE3	; 227
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
            uart_print("\n");
    1474:	8d e2       	ldi	r24, 0x2D	; 45
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <uart_print>
            command = UART_Receive(); // Receive command
    147c:	0e 94 10 0c 	call	0x1820	; 0x1820 <UART_Receive>
    1480:	8f 87       	std	Y+15, r24	; 0x0f

            switch (command) {
    1482:	8f 85       	ldd	r24, Y+15	; 0x0f
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	21 96       	adiw	r28, 0x01	; 1
    148a:	3f af       	std	Y+63, r19	; 0x3f
    148c:	2e af       	std	Y+62, r18	; 0x3e
    148e:	21 97       	sbiw	r28, 0x01	; 1
    1490:	21 96       	adiw	r28, 0x01	; 1
    1492:	4e ad       	ldd	r20, Y+62	; 0x3e
    1494:	5f ad       	ldd	r21, Y+63	; 0x3f
    1496:	21 97       	sbiw	r28, 0x01	; 1
    1498:	41 33       	cpi	r20, 0x31	; 49
    149a:	51 05       	cpc	r21, r1
    149c:	f1 f0       	breq	.+60     	; 0x14da <main+0x290>
    149e:	21 96       	adiw	r28, 0x01	; 1
    14a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14a4:	21 97       	sbiw	r28, 0x01	; 1
    14a6:	82 33       	cpi	r24, 0x32	; 50
    14a8:	91 05       	cpc	r25, r1
    14aa:	44 f4       	brge	.+16     	; 0x14bc <main+0x272>
    14ac:	21 96       	adiw	r28, 0x01	; 1
    14ae:	2e ad       	ldd	r18, Y+62	; 0x3e
    14b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    14b2:	21 97       	sbiw	r28, 0x01	; 1
    14b4:	20 33       	cpi	r18, 0x30	; 48
    14b6:	31 05       	cpc	r19, r1
    14b8:	a9 f0       	breq	.+42     	; 0x14e4 <main+0x29a>
    14ba:	23 c0       	rjmp	.+70     	; 0x1502 <main+0x2b8>
    14bc:	21 96       	adiw	r28, 0x01	; 1
    14be:	4e ad       	ldd	r20, Y+62	; 0x3e
    14c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    14c2:	21 97       	sbiw	r28, 0x01	; 1
    14c4:	42 33       	cpi	r20, 0x32	; 50
    14c6:	51 05       	cpc	r21, r1
    14c8:	91 f0       	breq	.+36     	; 0x14ee <main+0x2a4>
    14ca:	21 96       	adiw	r28, 0x01	; 1
    14cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    14ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    14d0:	21 97       	sbiw	r28, 0x01	; 1
    14d2:	83 33       	cpi	r24, 0x33	; 51
    14d4:	91 05       	cpc	r25, r1
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <main+0x2ae>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <main+0x2b8>
                case '1':
                    control_light(1); // Turn light on
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 1d 08 	call	0x103a	; 0x103a <control_light>
    14e2:	dc ce       	rjmp	.-584    	; 0x129c <main+0x52>
                    break;
                case '0':
                    control_light(0); // Turn light off
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 1d 08 	call	0x103a	; 0x103a <control_light>
    14ec:	d7 ce       	rjmp	.-594    	; 0x129c <main+0x52>
                    break;
                case '2':
                    control_door(1); // Open door
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 44 08 	call	0x1088	; 0x1088 <control_door>
    14f6:	d2 ce       	rjmp	.-604    	; 0x129c <main+0x52>
                    break;
                case '3':
                    control_door(0); // Close door
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 44 08 	call	0x1088	; 0x1088 <control_door>
    1500:	cd ce       	rjmp	.-614    	; 0x129c <main+0x52>
                    break;
                default:
                	UART_TransmitString("Invalid Command\r\n");
    1502:	8f e2       	ldi	r24, 0x2F	; 47
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>
    150a:	c8 ce       	rjmp	.-624    	; 0x129c <main+0x52>
                    break;
            }
       } else {
            attempts++;
    150c:	89 89       	ldd	r24, Y+17	; 0x11
    150e:	9a 89       	ldd	r25, Y+18	; 0x12
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	9a 8b       	std	Y+18, r25	; 0x12
    1514:	89 8b       	std	Y+17, r24	; 0x11
            UART_TransmitString("Login Failed\r\n");
    1516:	81 e4       	ldi	r24, 0x41	; 65
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 26 0c 	call	0x184c	; 0x184c <UART_TransmitString>

            if (attempts >= MAX_ATTEMPTS) {
    151e:	89 89       	ldd	r24, Y+17	; 0x11
    1520:	9a 89       	ldd	r25, Y+18	; 0x12
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	0c f4       	brge	.+2      	; 0x152a <main+0x2e0>
    1528:	b9 ce       	rjmp	.-654    	; 0x129c <main+0x52>
                activate_alarm(); // Trigger alarm after max attempts
    152a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <activate_alarm>
                attempts = 0; // Reset attempts after alarm
    152e:	1a 8a       	std	Y+18, r1	; 0x12
    1530:	19 8a       	std	Y+17, r1	; 0x11
    1532:	b4 ce       	rjmp	.-664    	; 0x129c <main+0x52>

00001534 <UART_ReceiveString>:
            }
        }
    }
}

void UART_ReceiveString(char *str, u8 max_length) {
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <UART_ReceiveString+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <UART_ReceiveString+0x8>
    153c:	0f 92       	push	r0
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	6d 83       	std	Y+5, r22	; 0x05
    u8 i = 0;
    1548:	1a 82       	std	Y+2, r1	; 0x02
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <UART_ReceiveString+0x44>
    char ch;
    while (i < max_length - 1) {
        ch = UART_Receive(); // Read a character from UART
    154c:	0e 94 10 0c 	call	0x1820	; 0x1820 <UART_Receive>
    1550:	89 83       	std	Y+1, r24	; 0x01
        if (ch == '\n' || ch == '\r') { // End of input
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	8a 30       	cpi	r24, 0x0A	; 10
    1556:	d1 f0       	breq	.+52     	; 0x158c <UART_ReceiveString+0x58>
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	8d 30       	cpi	r24, 0x0D	; 13
    155c:	b9 f0       	breq	.+46     	; 0x158c <UART_ReceiveString+0x58>
            break;
        }
        str[i++] = ch; // Store character
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	fc 01       	movw	r30, r24
    156a:	e2 0f       	add	r30, r18
    156c:	f3 1f       	adc	r31, r19
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	80 83       	st	Z, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	8a 83       	std	Y+2, r24	; 0x02
}

void UART_ReceiveString(char *str, u8 max_length) {
    u8 i = 0;
    char ch;
    while (i < max_length - 1) {
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	28 17       	cp	r18, r24
    1588:	39 07       	cpc	r19, r25
    158a:	04 f3       	brlt	.-64     	; 0x154c <UART_ReceiveString+0x18>
        if (ch == '\n' || ch == '\r') { // End of input
            break;
        }
        str[i++] = ch; // Store character
    }
    str[i] = '\0'; // Null-terminate the string
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	fc 01       	movw	r30, r24
    1598:	e2 0f       	add	r30, r18
    159a:	f3 1f       	adc	r31, r19
    159c:	10 82       	st	Z, r1
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <uart_transmit>:

void uart_transmit(unsigned char data) {
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1 << UDRE))); // Wait until buffer is empty
    15ba:	eb e2       	ldi	r30, 0x2B	; 43
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	80 72       	andi	r24, 0x20	; 32
    15c6:	90 70       	andi	r25, 0x00	; 0
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	b9 f3       	breq	.-18     	; 0x15ba <uart_transmit+0xc>
    UDR = data; // Send data
    15cc:	ec e2       	ldi	r30, 0x2C	; 44
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	80 83       	st	Z, r24
}
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <uart_print>:

void uart_print(const char *str) {
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <uart_print+0x6>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	0b c0       	rjmp	.+22     	; 0x1602 <uart_print+0x26>
    while (*str) {
        uart_transmit(*str++);
    15ec:	e9 81       	ldd	r30, Y+1	; 0x01
    15ee:	fa 81       	ldd	r31, Y+2	; 0x02
    15f0:	20 81       	ld	r18, Z
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	82 2f       	mov	r24, r18
    15fe:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <uart_transmit>
    while (!(UCSRA & (1 << UDRE))); // Wait until buffer is empty
    UDR = data; // Send data
}

void uart_print(const char *str) {
    while (*str) {
    1602:	e9 81       	ldd	r30, Y+1	; 0x01
    1604:	fa 81       	ldd	r31, Y+2	; 0x02
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	81 f7       	brne	.-32     	; 0x15ec <uart_print+0x10>
        uart_transmit(*str++);
    }
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <uart_print_number>:
void uart_print_number(uint16_t number) {
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	2c 97       	sbiw	r28, 0x0c	; 12
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	9c 87       	std	Y+12, r25	; 0x0c
    162c:	8b 87       	std	Y+11, r24	; 0x0b
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "%u", number);
    162e:	8d b7       	in	r24, 0x3d	; 61
    1630:	9e b7       	in	r25, 0x3e	; 62
    1632:	08 97       	sbiw	r24, 0x08	; 8
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	9e bf       	out	0x3e, r25	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	8d bf       	out	0x3d, r24	; 61
    163e:	ed b7       	in	r30, 0x3d	; 61
    1640:	fe b7       	in	r31, 0x3e	; 62
    1642:	31 96       	adiw	r30, 0x01	; 1
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	8a e0       	ldi	r24, 0x0A	; 10
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	93 83       	std	Z+3, r25	; 0x03
    1652:	82 83       	std	Z+2, r24	; 0x02
    1654:	80 e5       	ldi	r24, 0x50	; 80
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	95 83       	std	Z+5, r25	; 0x05
    165a:	84 83       	std	Z+4, r24	; 0x04
    165c:	8b 85       	ldd	r24, Y+11	; 0x0b
    165e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1660:	97 83       	std	Z+7, r25	; 0x07
    1662:	86 83       	std	Z+6, r24	; 0x06
    1664:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <snprintf>
    1668:	8d b7       	in	r24, 0x3d	; 61
    166a:	9e b7       	in	r25, 0x3e	; 62
    166c:	08 96       	adiw	r24, 0x08	; 8
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	9e bf       	out	0x3e, r25	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	8d bf       	out	0x3d, r24	; 61
    uart_print(buffer);
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <uart_print>
}
    1680:	2c 96       	adiw	r28, 0x0c	; 12
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <pwm_init>:


void pwm_init() {
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << DDD7); // Set PD7 as output (OC2)
    169a:	a1 e3       	ldi	r26, 0x31	; 49
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e1 e3       	ldi	r30, 0x31	; 49
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 68       	ori	r24, 0x80	; 128
    16a6:	8c 93       	st	X, r24
    TCCR2 = (1 << WGM20) | (1 << COM21) | (1 << CS20); // Fast PWM mode, non-inverted
    16a8:	e5 e4       	ldi	r30, 0x45	; 69
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	81 e6       	ldi	r24, 0x61	; 97
    16ae:	80 83       	st	Z, r24
    OCR2 = 0; // Set initial PWM duty cycle to 0%
    16b0:	e3 e4       	ldi	r30, 0x43	; 67
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	10 82       	st	Z, r1
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <set_fan_speed>:

void set_fan_speed(uint8_t speed) {
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = speed; // Set the PWM duty cycle
    16c8:	e3 e4       	ldi	r30, 0x43	; 67
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	80 83       	st	Z, r24
    fan_speed = speed; // Update fan speed percentage
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	80 93 ec 02 	sts	0x02EC, r24
}
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <map_adc_to_pwm>:

uint8_t map_adc_to_pwm(uint16_t adc_value) {
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <map_adc_to_pwm+0x6>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
    return (uint8_t)((adc_value * 255) / 1023); // Map ADC value (0-1023) to PWM duty cycle (0-255)
    16ec:	49 81       	ldd	r20, Y+1	; 0x01
    16ee:	5a 81       	ldd	r21, Y+2	; 0x02
    16f0:	ca 01       	movw	r24, r20
    16f2:	9c 01       	movw	r18, r24
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	c9 01       	movw	r24, r18
    16fa:	96 95       	lsr	r25
    16fc:	98 2f       	mov	r25, r24
    16fe:	88 27       	eor	r24, r24
    1700:	97 95       	ror	r25
    1702:	87 95       	ror	r24
    1704:	82 1b       	sub	r24, r18
    1706:	93 0b       	sbc	r25, r19
    1708:	84 0f       	add	r24, r20
    170a:	95 1f       	adc	r25, r21
    170c:	2f ef       	ldi	r18, 0xFF	; 255
    170e:	33 e0       	ldi	r19, 0x03	; 3
    1710:	b9 01       	movw	r22, r18
    1712:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__udivmodhi4>
    1716:	cb 01       	movw	r24, r22
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <UART_Ini>:
#include <util/delay.h>
#include <avr/interrupt.h>


void UART_Ini()
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	0f 92       	push	r0
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Temp=0;
    172c:	19 82       	std	Y+1, r1	; 0x01
	/******   Enable Rx Interrupt (RXCIE)   *******/
	SET_BIT(UCSRB,RXCIE);
    172e:	aa e2       	ldi	r26, 0x2A	; 42
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ea e2       	ldi	r30, 0x2A	; 42
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 68       	ori	r24, 0x80	; 128
    173a:	8c 93       	st	X, r24
	/******   Enable UDRIE          *******/
	SET_BIT(UCSRB,UDRIE);
    173c:	aa e2       	ldi	r26, 0x2A	; 42
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ea e2       	ldi	r30, 0x2A	; 42
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	80 62       	ori	r24, 0x20	; 32
    1748:	8c 93       	st	X, r24

	/******   Select 8-BIT Data *********/
	CLR_BIT(UCSRB,UCSZ2);
    174a:	aa e2       	ldi	r26, 0x2A	; 42
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ea e2       	ldi	r30, 0x2A	; 42
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8b 7f       	andi	r24, 0xFB	; 251
    1756:	8c 93       	st	X, r24
	/*select UCSRC Register*/
	SET_BIT(Local_Temp,URSEL);
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	80 68       	ori	r24, 0x80	; 128
    175c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_Temp,UCSZ0);
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	82 60       	ori	r24, 0x02	; 2
    1762:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_Temp,UCSZ1);
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	89 83       	std	Y+1, r24	; 0x01
	/******  Select UART Mode *********/
	CLR_BIT(Local_Temp,UMSEL);//select  Asynchronous Mode
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	89 83       	std	Y+1, r24	; 0x01
	/******   Select Parity Mode *********/
	CLR_BIT(Local_Temp,UPM0);//disable Parity
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	8f 7e       	andi	r24, 0xEF	; 239
    1774:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_Temp,UPM1);
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	8f 7d       	andi	r24, 0xDF	; 223
    177a:	89 83       	std	Y+1, r24	; 0x01
	/******   Select Stop bit *********/
	CLR_BIT(Local_Temp,USBS);
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	87 7f       	andi	r24, 0xF7	; 247
    1780:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Local_Temp;
    1782:	e0 e4       	ldi	r30, 0x40	; 64
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	80 83       	st	Z, r24

	/******   Select BuadRate *********/
	UBRRL=51;
    178a:	e9 e2       	ldi	r30, 0x29	; 41
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	83 e3       	ldi	r24, 0x33	; 51
    1790:	80 83       	st	Z, r24
	/******   Enable Rx *********/
	SET_BIT(UCSRB,RXEN);
    1792:	aa e2       	ldi	r26, 0x2A	; 42
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ea e2       	ldi	r30, 0x2A	; 42
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 61       	ori	r24, 0x10	; 16
    179e:	8c 93       	st	X, r24
	/******   Enable Tx *********/
	SET_BIT(UCSRB,TXEN);
    17a0:	aa e2       	ldi	r26, 0x2A	; 42
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ea e2       	ldi	r30, 0x2A	; 42
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 60       	ori	r24, 0x08	; 8
    17ac:	8c 93       	st	X, r24

}
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <UART_Transmit>:

void UART_Transmit(u8 data){
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE)==0);// If UDRE is one, the buffer is empty, and therefore ready to be written.
    17c2:	eb e2       	ldi	r30, 0x2B	; 43
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	82 95       	swap	r24
    17ca:	86 95       	lsr	r24
    17cc:	87 70       	andi	r24, 0x07	; 7
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	90 70       	andi	r25, 0x00	; 0
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	a1 f3       	breq	.-24     	; 0x17c2 <UART_Transmit+0xc>
	SET_BIT(UCSRA,UDRE);
    17da:	ab e2       	ldi	r26, 0x2B	; 43
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e2       	ldi	r30, 0x2B	; 43
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	8c 93       	st	X, r24
	UDR=data;
    17e8:	ec e2       	ldi	r30, 0x2C	; 44
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,TXC)==0);//This flag bit is set when the entire frame in the transmit Shift Register has been shifted out and
    17f0:	eb e2       	ldi	r30, 0x2B	; 43
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	82 95       	swap	r24
    17f8:	86 95       	lsr	r24
    17fa:	86 95       	lsr	r24
    17fc:	83 70       	andi	r24, 0x03	; 3
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	81 70       	andi	r24, 0x01	; 1
    1804:	90 70       	andi	r25, 0x00	; 0
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	99 f3       	breq	.-26     	; 0x17f0 <UART_Transmit+0x3a>
	SET_BIT(UCSRA,TXC);
    180a:	ab e2       	ldi	r26, 0x2B	; 43
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	eb e2       	ldi	r30, 0x2B	; 43
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	8c 93       	st	X, r24
	//there are no new data currently present in the transmit buffer (UDR).
}
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <UART_Receive>:
u8 	UART_Receive(void){
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC)==0);//This flag bit is set when there are unread data in the receive buffer and cleared when the receive
    1828:	eb e2       	ldi	r30, 0x2B	; 43
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	88 23       	and	r24, r24
    1830:	dc f7       	brge	.-10     	; 0x1828 <UART_Receive+0x8>
	SET_BIT(UCSRA,RXC);
    1832:	ab e2       	ldi	r26, 0x2B	; 43
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e2       	ldi	r30, 0x2B	; 43
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 68       	ori	r24, 0x80	; 128
    183e:	8c 93       	st	X, r24
	//buffer is empty (that is, does not contain any unread data)
	return UDR;
    1840:	ec e2       	ldi	r30, 0x2C	; 44
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <UART_TransmitString>:

void UART_TransmitString(u8* ptr_u8Data){
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <UART_TransmitString+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <UART_TransmitString+0x8>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <UART_TransmitString+0xa>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Counter=0;
    185e:	19 82       	std	Y+1, r1	; 0x01
    1860:	1a 82       	std	Y+2, r1	; 0x02
    1862:	1b 82       	std	Y+3, r1	; 0x03
    1864:	1c 82       	std	Y+4, r1	; 0x04
	for(local_u32Counter=0;ptr_u8Data[local_u32Counter]!='\0';local_u32Counter++){
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	1a 82       	std	Y+2, r1	; 0x02
    186a:	1b 82       	std	Y+3, r1	; 0x03
    186c:	1c 82       	std	Y+4, r1	; 0x04
    186e:	15 c0       	rjmp	.+42     	; 0x189a <UART_TransmitString+0x4e>
		UART_Transmit(ptr_u8Data[local_u32Counter]);
    1870:	29 81       	ldd	r18, Y+1	; 0x01
    1872:	3a 81       	ldd	r19, Y+2	; 0x02
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	fc 01       	movw	r30, r24
    187a:	e2 0f       	add	r30, r18
    187c:	f3 1f       	adc	r31, r19
    187e:	80 81       	ld	r24, Z
    1880:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <UART_Transmit>
	return UDR;
}

void UART_TransmitString(u8* ptr_u8Data){
	u32 local_u32Counter=0;
	for(local_u32Counter=0;ptr_u8Data[local_u32Counter]!='\0';local_u32Counter++){
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	ab 81       	ldd	r26, Y+3	; 0x03
    188a:	bc 81       	ldd	r27, Y+4	; 0x04
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	a1 1d       	adc	r26, r1
    1890:	b1 1d       	adc	r27, r1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	ab 83       	std	Y+3, r26	; 0x03
    1898:	bc 83       	std	Y+4, r27	; 0x04
    189a:	29 81       	ldd	r18, Y+1	; 0x01
    189c:	3a 81       	ldd	r19, Y+2	; 0x02
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	fc 01       	movw	r30, r24
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	09 f7       	brne	.-62     	; 0x1870 <UART_TransmitString+0x24>
		UART_Transmit(ptr_u8Data[local_u32Counter]);
	}
}
    18ae:	26 96       	adiw	r28, 0x06	; 6
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <__mulsi3>:
    18c0:	62 9f       	mul	r22, r18
    18c2:	d0 01       	movw	r26, r0
    18c4:	73 9f       	mul	r23, r19
    18c6:	f0 01       	movw	r30, r0
    18c8:	82 9f       	mul	r24, r18
    18ca:	e0 0d       	add	r30, r0
    18cc:	f1 1d       	adc	r31, r1
    18ce:	64 9f       	mul	r22, r20
    18d0:	e0 0d       	add	r30, r0
    18d2:	f1 1d       	adc	r31, r1
    18d4:	92 9f       	mul	r25, r18
    18d6:	f0 0d       	add	r31, r0
    18d8:	83 9f       	mul	r24, r19
    18da:	f0 0d       	add	r31, r0
    18dc:	74 9f       	mul	r23, r20
    18de:	f0 0d       	add	r31, r0
    18e0:	65 9f       	mul	r22, r21
    18e2:	f0 0d       	add	r31, r0
    18e4:	99 27       	eor	r25, r25
    18e6:	72 9f       	mul	r23, r18
    18e8:	b0 0d       	add	r27, r0
    18ea:	e1 1d       	adc	r30, r1
    18ec:	f9 1f       	adc	r31, r25
    18ee:	63 9f       	mul	r22, r19
    18f0:	b0 0d       	add	r27, r0
    18f2:	e1 1d       	adc	r30, r1
    18f4:	f9 1f       	adc	r31, r25
    18f6:	bd 01       	movw	r22, r26
    18f8:	cf 01       	movw	r24, r30
    18fa:	11 24       	eor	r1, r1
    18fc:	08 95       	ret

000018fe <__udivmodhi4>:
    18fe:	aa 1b       	sub	r26, r26
    1900:	bb 1b       	sub	r27, r27
    1902:	51 e1       	ldi	r21, 0x11	; 17
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <__udivmodhi4_ep>

00001906 <__udivmodhi4_loop>:
    1906:	aa 1f       	adc	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	a6 17       	cp	r26, r22
    190c:	b7 07       	cpc	r27, r23
    190e:	10 f0       	brcs	.+4      	; 0x1914 <__udivmodhi4_ep>
    1910:	a6 1b       	sub	r26, r22
    1912:	b7 0b       	sbc	r27, r23

00001914 <__udivmodhi4_ep>:
    1914:	88 1f       	adc	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	5a 95       	dec	r21
    191a:	a9 f7       	brne	.-22     	; 0x1906 <__udivmodhi4_loop>
    191c:	80 95       	com	r24
    191e:	90 95       	com	r25
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	08 95       	ret

00001926 <__prologue_saves__>:
    1926:	2f 92       	push	r2
    1928:	3f 92       	push	r3
    192a:	4f 92       	push	r4
    192c:	5f 92       	push	r5
    192e:	6f 92       	push	r6
    1930:	7f 92       	push	r7
    1932:	8f 92       	push	r8
    1934:	9f 92       	push	r9
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	ca 1b       	sub	r28, r26
    1950:	db 0b       	sbc	r29, r27
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	09 94       	ijmp

0000195e <__epilogue_restores__>:
    195e:	2a 88       	ldd	r2, Y+18	; 0x12
    1960:	39 88       	ldd	r3, Y+17	; 0x11
    1962:	48 88       	ldd	r4, Y+16	; 0x10
    1964:	5f 84       	ldd	r5, Y+15	; 0x0f
    1966:	6e 84       	ldd	r6, Y+14	; 0x0e
    1968:	7d 84       	ldd	r7, Y+13	; 0x0d
    196a:	8c 84       	ldd	r8, Y+12	; 0x0c
    196c:	9b 84       	ldd	r9, Y+11	; 0x0b
    196e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1970:	b9 84       	ldd	r11, Y+9	; 0x09
    1972:	c8 84       	ldd	r12, Y+8	; 0x08
    1974:	df 80       	ldd	r13, Y+7	; 0x07
    1976:	ee 80       	ldd	r14, Y+6	; 0x06
    1978:	fd 80       	ldd	r15, Y+5	; 0x05
    197a:	0c 81       	ldd	r16, Y+4	; 0x04
    197c:	1b 81       	ldd	r17, Y+3	; 0x03
    197e:	aa 81       	ldd	r26, Y+2	; 0x02
    1980:	b9 81       	ldd	r27, Y+1	; 0x01
    1982:	ce 0f       	add	r28, r30
    1984:	d1 1d       	adc	r29, r1
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	ed 01       	movw	r28, r26
    1992:	08 95       	ret

00001994 <strcmp>:
    1994:	fb 01       	movw	r30, r22
    1996:	dc 01       	movw	r26, r24
    1998:	8d 91       	ld	r24, X+
    199a:	01 90       	ld	r0, Z+
    199c:	80 19       	sub	r24, r0
    199e:	01 10       	cpse	r0, r1
    19a0:	d9 f3       	breq	.-10     	; 0x1998 <strcmp+0x4>
    19a2:	99 0b       	sbc	r25, r25
    19a4:	08 95       	ret

000019a6 <snprintf>:
    19a6:	ae e0       	ldi	r26, 0x0E	; 14
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e9 ed       	ldi	r30, 0xD9	; 217
    19ac:	fc e0       	ldi	r31, 0x0C	; 12
    19ae:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__prologue_saves__+0x1c>
    19b2:	0d 89       	ldd	r16, Y+21	; 0x15
    19b4:	1e 89       	ldd	r17, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	97 ff       	sbrs	r25, 7
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <snprintf+0x1c>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e8       	ldi	r25, 0x80	; 128
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	1a 83       	std	Y+2, r17	; 0x02
    19ca:	09 83       	std	Y+1, r16	; 0x01
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	8c 83       	std	Y+4, r24	; 0x04
    19d0:	9e 01       	movw	r18, r28
    19d2:	25 5e       	subi	r18, 0xE5	; 229
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	ce 01       	movw	r24, r28
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	69 8d       	ldd	r22, Y+25	; 0x19
    19dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19de:	a9 01       	movw	r20, r18
    19e0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <vfprintf>
    19e4:	4d 81       	ldd	r20, Y+5	; 0x05
    19e6:	5e 81       	ldd	r21, Y+6	; 0x06
    19e8:	57 fd       	sbrc	r21, 7
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <snprintf+0x5a>
    19ec:	2f 81       	ldd	r18, Y+7	; 0x07
    19ee:	38 85       	ldd	r19, Y+8	; 0x08
    19f0:	42 17       	cp	r20, r18
    19f2:	53 07       	cpc	r21, r19
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <snprintf+0x52>
    19f6:	9a 01       	movw	r18, r20
    19f8:	02 0f       	add	r16, r18
    19fa:	13 1f       	adc	r17, r19
    19fc:	f8 01       	movw	r30, r16
    19fe:	10 82       	st	Z, r1
    1a00:	2e 96       	adiw	r28, 0x0e	; 14
    1a02:	e4 e0       	ldi	r30, 0x04	; 4
    1a04:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__epilogue_restores__+0x1c>

00001a08 <vfprintf>:
    1a08:	ab e0       	ldi	r26, 0x0B	; 11
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e0       	ldi	r30, 0x0A	; 10
    1a0e:	fd e0       	ldi	r31, 0x0D	; 13
    1a10:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__prologue_saves__>
    1a14:	3c 01       	movw	r6, r24
    1a16:	2b 01       	movw	r4, r22
    1a18:	5a 01       	movw	r10, r20
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	17 82       	std	Z+7, r1	; 0x07
    1a1e:	16 82       	std	Z+6, r1	; 0x06
    1a20:	83 81       	ldd	r24, Z+3	; 0x03
    1a22:	81 fd       	sbrc	r24, 1
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <vfprintf+0x24>
    1a26:	6f ef       	ldi	r22, 0xFF	; 255
    1a28:	7f ef       	ldi	r23, 0xFF	; 255
    1a2a:	c6 c1       	rjmp	.+908    	; 0x1db8 <vfprintf+0x3b0>
    1a2c:	9a e0       	ldi	r25, 0x0A	; 10
    1a2e:	89 2e       	mov	r8, r25
    1a30:	1e 01       	movw	r2, r28
    1a32:	08 94       	sec
    1a34:	21 1c       	adc	r2, r1
    1a36:	31 1c       	adc	r3, r1
    1a38:	f3 01       	movw	r30, r6
    1a3a:	23 81       	ldd	r18, Z+3	; 0x03
    1a3c:	f2 01       	movw	r30, r4
    1a3e:	23 fd       	sbrc	r18, 3
    1a40:	85 91       	lpm	r24, Z+
    1a42:	23 ff       	sbrs	r18, 3
    1a44:	81 91       	ld	r24, Z+
    1a46:	2f 01       	movw	r4, r30
    1a48:	88 23       	and	r24, r24
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <vfprintf+0x46>
    1a4c:	b2 c1       	rjmp	.+868    	; 0x1db2 <vfprintf+0x3aa>
    1a4e:	85 32       	cpi	r24, 0x25	; 37
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <vfprintf+0x58>
    1a52:	23 fd       	sbrc	r18, 3
    1a54:	85 91       	lpm	r24, Z+
    1a56:	23 ff       	sbrs	r18, 3
    1a58:	81 91       	ld	r24, Z+
    1a5a:	2f 01       	movw	r4, r30
    1a5c:	85 32       	cpi	r24, 0x25	; 37
    1a5e:	29 f4       	brne	.+10     	; 0x1a6a <vfprintf+0x62>
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	b3 01       	movw	r22, r6
    1a64:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1a68:	e7 cf       	rjmp	.-50     	; 0x1a38 <vfprintf+0x30>
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	ff 24       	eor	r15, r15
    1a6e:	ee 24       	eor	r14, r14
    1a70:	99 24       	eor	r9, r9
    1a72:	ff e1       	ldi	r31, 0x1F	; 31
    1a74:	ff 15       	cp	r31, r15
    1a76:	d0 f0       	brcs	.+52     	; 0x1aac <vfprintf+0xa4>
    1a78:	9b 32       	cpi	r25, 0x2B	; 43
    1a7a:	69 f0       	breq	.+26     	; 0x1a96 <vfprintf+0x8e>
    1a7c:	9c 32       	cpi	r25, 0x2C	; 44
    1a7e:	28 f4       	brcc	.+10     	; 0x1a8a <vfprintf+0x82>
    1a80:	90 32       	cpi	r25, 0x20	; 32
    1a82:	59 f0       	breq	.+22     	; 0x1a9a <vfprintf+0x92>
    1a84:	93 32       	cpi	r25, 0x23	; 35
    1a86:	91 f4       	brne	.+36     	; 0x1aac <vfprintf+0xa4>
    1a88:	0e c0       	rjmp	.+28     	; 0x1aa6 <vfprintf+0x9e>
    1a8a:	9d 32       	cpi	r25, 0x2D	; 45
    1a8c:	49 f0       	breq	.+18     	; 0x1aa0 <vfprintf+0x98>
    1a8e:	90 33       	cpi	r25, 0x30	; 48
    1a90:	69 f4       	brne	.+26     	; 0x1aac <vfprintf+0xa4>
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	24 c0       	rjmp	.+72     	; 0x1ade <vfprintf+0xd6>
    1a96:	52 e0       	ldi	r21, 0x02	; 2
    1a98:	f5 2a       	or	r15, r21
    1a9a:	84 e0       	ldi	r24, 0x04	; 4
    1a9c:	f8 2a       	or	r15, r24
    1a9e:	28 c0       	rjmp	.+80     	; 0x1af0 <vfprintf+0xe8>
    1aa0:	98 e0       	ldi	r25, 0x08	; 8
    1aa2:	f9 2a       	or	r15, r25
    1aa4:	25 c0       	rjmp	.+74     	; 0x1af0 <vfprintf+0xe8>
    1aa6:	e0 e1       	ldi	r30, 0x10	; 16
    1aa8:	fe 2a       	or	r15, r30
    1aaa:	22 c0       	rjmp	.+68     	; 0x1af0 <vfprintf+0xe8>
    1aac:	f7 fc       	sbrc	r15, 7
    1aae:	29 c0       	rjmp	.+82     	; 0x1b02 <vfprintf+0xfa>
    1ab0:	89 2f       	mov	r24, r25
    1ab2:	80 53       	subi	r24, 0x30	; 48
    1ab4:	8a 30       	cpi	r24, 0x0A	; 10
    1ab6:	70 f4       	brcc	.+28     	; 0x1ad4 <vfprintf+0xcc>
    1ab8:	f6 fe       	sbrs	r15, 6
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <vfprintf+0xbe>
    1abc:	98 9c       	mul	r9, r8
    1abe:	90 2c       	mov	r9, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	98 0e       	add	r9, r24
    1ac4:	15 c0       	rjmp	.+42     	; 0x1af0 <vfprintf+0xe8>
    1ac6:	e8 9c       	mul	r14, r8
    1ac8:	e0 2c       	mov	r14, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	e8 0e       	add	r14, r24
    1ace:	f0 e2       	ldi	r31, 0x20	; 32
    1ad0:	ff 2a       	or	r15, r31
    1ad2:	0e c0       	rjmp	.+28     	; 0x1af0 <vfprintf+0xe8>
    1ad4:	9e 32       	cpi	r25, 0x2E	; 46
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <vfprintf+0xda>
    1ad8:	f6 fc       	sbrc	r15, 6
    1ada:	6b c1       	rjmp	.+726    	; 0x1db2 <vfprintf+0x3aa>
    1adc:	40 e4       	ldi	r20, 0x40	; 64
    1ade:	f4 2a       	or	r15, r20
    1ae0:	07 c0       	rjmp	.+14     	; 0x1af0 <vfprintf+0xe8>
    1ae2:	9c 36       	cpi	r25, 0x6C	; 108
    1ae4:	19 f4       	brne	.+6      	; 0x1aec <vfprintf+0xe4>
    1ae6:	50 e8       	ldi	r21, 0x80	; 128
    1ae8:	f5 2a       	or	r15, r21
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <vfprintf+0xe8>
    1aec:	98 36       	cpi	r25, 0x68	; 104
    1aee:	49 f4       	brne	.+18     	; 0x1b02 <vfprintf+0xfa>
    1af0:	f2 01       	movw	r30, r4
    1af2:	23 fd       	sbrc	r18, 3
    1af4:	95 91       	lpm	r25, Z+
    1af6:	23 ff       	sbrs	r18, 3
    1af8:	91 91       	ld	r25, Z+
    1afa:	2f 01       	movw	r4, r30
    1afc:	99 23       	and	r25, r25
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <vfprintf+0xfa>
    1b00:	b8 cf       	rjmp	.-144    	; 0x1a72 <vfprintf+0x6a>
    1b02:	89 2f       	mov	r24, r25
    1b04:	85 54       	subi	r24, 0x45	; 69
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	18 f0       	brcs	.+6      	; 0x1b10 <vfprintf+0x108>
    1b0a:	80 52       	subi	r24, 0x20	; 32
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	38 f4       	brcc	.+14     	; 0x1b1e <vfprintf+0x116>
    1b10:	44 e0       	ldi	r20, 0x04	; 4
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	a4 0e       	add	r10, r20
    1b16:	b5 1e       	adc	r11, r21
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	59 83       	std	Y+1, r21	; 0x01
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <vfprintf+0x134>
    1b1e:	93 36       	cpi	r25, 0x63	; 99
    1b20:	31 f0       	breq	.+12     	; 0x1b2e <vfprintf+0x126>
    1b22:	93 37       	cpi	r25, 0x73	; 115
    1b24:	79 f0       	breq	.+30     	; 0x1b44 <vfprintf+0x13c>
    1b26:	93 35       	cpi	r25, 0x53	; 83
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <vfprintf+0x124>
    1b2a:	56 c0       	rjmp	.+172    	; 0x1bd8 <vfprintf+0x1d0>
    1b2c:	20 c0       	rjmp	.+64     	; 0x1b6e <vfprintf+0x166>
    1b2e:	f5 01       	movw	r30, r10
    1b30:	80 81       	ld	r24, Z
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	42 e0       	ldi	r20, 0x02	; 2
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	a4 0e       	add	r10, r20
    1b3a:	b5 1e       	adc	r11, r21
    1b3c:	61 01       	movw	r12, r2
    1b3e:	01 e0       	ldi	r16, 0x01	; 1
    1b40:	10 e0       	ldi	r17, 0x00	; 0
    1b42:	12 c0       	rjmp	.+36     	; 0x1b68 <vfprintf+0x160>
    1b44:	f5 01       	movw	r30, r10
    1b46:	c0 80       	ld	r12, Z
    1b48:	d1 80       	ldd	r13, Z+1	; 0x01
    1b4a:	f6 fc       	sbrc	r15, 6
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <vfprintf+0x14c>
    1b4e:	6f ef       	ldi	r22, 0xFF	; 255
    1b50:	7f ef       	ldi	r23, 0xFF	; 255
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0x150>
    1b54:	69 2d       	mov	r22, r9
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	42 e0       	ldi	r20, 0x02	; 2
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	a4 0e       	add	r10, r20
    1b5e:	b5 1e       	adc	r11, r21
    1b60:	c6 01       	movw	r24, r12
    1b62:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <strnlen>
    1b66:	8c 01       	movw	r16, r24
    1b68:	5f e7       	ldi	r21, 0x7F	; 127
    1b6a:	f5 22       	and	r15, r21
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <vfprintf+0x18e>
    1b6e:	f5 01       	movw	r30, r10
    1b70:	c0 80       	ld	r12, Z
    1b72:	d1 80       	ldd	r13, Z+1	; 0x01
    1b74:	f6 fc       	sbrc	r15, 6
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <vfprintf+0x176>
    1b78:	6f ef       	ldi	r22, 0xFF	; 255
    1b7a:	7f ef       	ldi	r23, 0xFF	; 255
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0x17a>
    1b7e:	69 2d       	mov	r22, r9
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	42 e0       	ldi	r20, 0x02	; 2
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	a4 0e       	add	r10, r20
    1b88:	b5 1e       	adc	r11, r21
    1b8a:	c6 01       	movw	r24, r12
    1b8c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <strnlen_P>
    1b90:	8c 01       	movw	r16, r24
    1b92:	50 e8       	ldi	r21, 0x80	; 128
    1b94:	f5 2a       	or	r15, r21
    1b96:	f3 fe       	sbrs	r15, 3
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <vfprintf+0x1a0>
    1b9a:	1a c0       	rjmp	.+52     	; 0x1bd0 <vfprintf+0x1c8>
    1b9c:	80 e2       	ldi	r24, 0x20	; 32
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b3 01       	movw	r22, r6
    1ba2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1ba6:	ea 94       	dec	r14
    1ba8:	8e 2d       	mov	r24, r14
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	08 17       	cp	r16, r24
    1bae:	19 07       	cpc	r17, r25
    1bb0:	a8 f3       	brcs	.-22     	; 0x1b9c <vfprintf+0x194>
    1bb2:	0e c0       	rjmp	.+28     	; 0x1bd0 <vfprintf+0x1c8>
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	f7 fc       	sbrc	r15, 7
    1bb8:	85 91       	lpm	r24, Z+
    1bba:	f7 fe       	sbrs	r15, 7
    1bbc:	81 91       	ld	r24, Z+
    1bbe:	6f 01       	movw	r12, r30
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	b3 01       	movw	r22, r6
    1bc4:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1bc8:	e1 10       	cpse	r14, r1
    1bca:	ea 94       	dec	r14
    1bcc:	01 50       	subi	r16, 0x01	; 1
    1bce:	10 40       	sbci	r17, 0x00	; 0
    1bd0:	01 15       	cp	r16, r1
    1bd2:	11 05       	cpc	r17, r1
    1bd4:	79 f7       	brne	.-34     	; 0x1bb4 <vfprintf+0x1ac>
    1bd6:	ea c0       	rjmp	.+468    	; 0x1dac <vfprintf+0x3a4>
    1bd8:	94 36       	cpi	r25, 0x64	; 100
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <vfprintf+0x1d8>
    1bdc:	99 36       	cpi	r25, 0x69	; 105
    1bde:	69 f5       	brne	.+90     	; 0x1c3a <vfprintf+0x232>
    1be0:	f7 fe       	sbrs	r15, 7
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <vfprintf+0x1ec>
    1be4:	f5 01       	movw	r30, r10
    1be6:	20 81       	ld	r18, Z
    1be8:	31 81       	ldd	r19, Z+1	; 0x01
    1bea:	42 81       	ldd	r20, Z+2	; 0x02
    1bec:	53 81       	ldd	r21, Z+3	; 0x03
    1bee:	84 e0       	ldi	r24, 0x04	; 4
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0a c0       	rjmp	.+20     	; 0x1c08 <vfprintf+0x200>
    1bf4:	f5 01       	movw	r30, r10
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	9c 01       	movw	r18, r24
    1bfc:	44 27       	eor	r20, r20
    1bfe:	37 fd       	sbrc	r19, 7
    1c00:	40 95       	com	r20
    1c02:	54 2f       	mov	r21, r20
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a8 0e       	add	r10, r24
    1c0a:	b9 1e       	adc	r11, r25
    1c0c:	9f e6       	ldi	r25, 0x6F	; 111
    1c0e:	f9 22       	and	r15, r25
    1c10:	57 ff       	sbrs	r21, 7
    1c12:	09 c0       	rjmp	.+18     	; 0x1c26 <vfprintf+0x21e>
    1c14:	50 95       	com	r21
    1c16:	40 95       	com	r20
    1c18:	30 95       	com	r19
    1c1a:	21 95       	neg	r18
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c20:	5f 4f       	sbci	r21, 0xFF	; 255
    1c22:	e0 e8       	ldi	r30, 0x80	; 128
    1c24:	fe 2a       	or	r15, r30
    1c26:	ca 01       	movw	r24, r20
    1c28:	b9 01       	movw	r22, r18
    1c2a:	a1 01       	movw	r20, r2
    1c2c:	2a e0       	ldi	r18, 0x0A	; 10
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__ultoa_invert>
    1c34:	d8 2e       	mov	r13, r24
    1c36:	d2 18       	sub	r13, r2
    1c38:	40 c0       	rjmp	.+128    	; 0x1cba <vfprintf+0x2b2>
    1c3a:	95 37       	cpi	r25, 0x75	; 117
    1c3c:	29 f4       	brne	.+10     	; 0x1c48 <vfprintf+0x240>
    1c3e:	1f 2d       	mov	r17, r15
    1c40:	1f 7e       	andi	r17, 0xEF	; 239
    1c42:	2a e0       	ldi	r18, 0x0A	; 10
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	1d c0       	rjmp	.+58     	; 0x1c82 <vfprintf+0x27a>
    1c48:	1f 2d       	mov	r17, r15
    1c4a:	19 7f       	andi	r17, 0xF9	; 249
    1c4c:	9f 36       	cpi	r25, 0x6F	; 111
    1c4e:	61 f0       	breq	.+24     	; 0x1c68 <vfprintf+0x260>
    1c50:	90 37       	cpi	r25, 0x70	; 112
    1c52:	20 f4       	brcc	.+8      	; 0x1c5c <vfprintf+0x254>
    1c54:	98 35       	cpi	r25, 0x58	; 88
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <vfprintf+0x252>
    1c58:	ac c0       	rjmp	.+344    	; 0x1db2 <vfprintf+0x3aa>
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <vfprintf+0x272>
    1c5c:	90 37       	cpi	r25, 0x70	; 112
    1c5e:	39 f0       	breq	.+14     	; 0x1c6e <vfprintf+0x266>
    1c60:	98 37       	cpi	r25, 0x78	; 120
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <vfprintf+0x25e>
    1c64:	a6 c0       	rjmp	.+332    	; 0x1db2 <vfprintf+0x3aa>
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <vfprintf+0x268>
    1c68:	28 e0       	ldi	r18, 0x08	; 8
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	0a c0       	rjmp	.+20     	; 0x1c82 <vfprintf+0x27a>
    1c6e:	10 61       	ori	r17, 0x10	; 16
    1c70:	14 fd       	sbrc	r17, 4
    1c72:	14 60       	ori	r17, 0x04	; 4
    1c74:	20 e1       	ldi	r18, 0x10	; 16
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <vfprintf+0x27a>
    1c7a:	14 fd       	sbrc	r17, 4
    1c7c:	16 60       	ori	r17, 0x06	; 6
    1c7e:	20 e1       	ldi	r18, 0x10	; 16
    1c80:	32 e0       	ldi	r19, 0x02	; 2
    1c82:	17 ff       	sbrs	r17, 7
    1c84:	08 c0       	rjmp	.+16     	; 0x1c96 <vfprintf+0x28e>
    1c86:	f5 01       	movw	r30, r10
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	44 e0       	ldi	r20, 0x04	; 4
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	08 c0       	rjmp	.+16     	; 0x1ca6 <vfprintf+0x29e>
    1c96:	f5 01       	movw	r30, r10
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	42 e0       	ldi	r20, 0x02	; 2
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	a4 0e       	add	r10, r20
    1ca8:	b5 1e       	adc	r11, r21
    1caa:	a1 01       	movw	r20, r2
    1cac:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__ultoa_invert>
    1cb0:	d8 2e       	mov	r13, r24
    1cb2:	d2 18       	sub	r13, r2
    1cb4:	8f e7       	ldi	r24, 0x7F	; 127
    1cb6:	f8 2e       	mov	r15, r24
    1cb8:	f1 22       	and	r15, r17
    1cba:	f6 fe       	sbrs	r15, 6
    1cbc:	0b c0       	rjmp	.+22     	; 0x1cd4 <vfprintf+0x2cc>
    1cbe:	5e ef       	ldi	r21, 0xFE	; 254
    1cc0:	f5 22       	and	r15, r21
    1cc2:	d9 14       	cp	r13, r9
    1cc4:	38 f4       	brcc	.+14     	; 0x1cd4 <vfprintf+0x2cc>
    1cc6:	f4 fe       	sbrs	r15, 4
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <vfprintf+0x2d0>
    1cca:	f2 fc       	sbrc	r15, 2
    1ccc:	05 c0       	rjmp	.+10     	; 0x1cd8 <vfprintf+0x2d0>
    1cce:	8f ee       	ldi	r24, 0xEF	; 239
    1cd0:	f8 22       	and	r15, r24
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <vfprintf+0x2d0>
    1cd4:	1d 2d       	mov	r17, r13
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <vfprintf+0x2d2>
    1cd8:	19 2d       	mov	r17, r9
    1cda:	f4 fe       	sbrs	r15, 4
    1cdc:	0d c0       	rjmp	.+26     	; 0x1cf8 <vfprintf+0x2f0>
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ed 0d       	add	r30, r13
    1ce2:	f1 1d       	adc	r31, r1
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 33       	cpi	r24, 0x30	; 48
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <vfprintf+0x2e8>
    1cea:	99 ee       	ldi	r25, 0xE9	; 233
    1cec:	f9 22       	and	r15, r25
    1cee:	08 c0       	rjmp	.+16     	; 0x1d00 <vfprintf+0x2f8>
    1cf0:	1f 5f       	subi	r17, 0xFF	; 255
    1cf2:	f2 fe       	sbrs	r15, 2
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <vfprintf+0x2f8>
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <vfprintf+0x2f6>
    1cf8:	8f 2d       	mov	r24, r15
    1cfa:	86 78       	andi	r24, 0x86	; 134
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <vfprintf+0x2f8>
    1cfe:	1f 5f       	subi	r17, 0xFF	; 255
    1d00:	0f 2d       	mov	r16, r15
    1d02:	f3 fc       	sbrc	r15, 3
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <vfprintf+0x326>
    1d06:	f0 fe       	sbrs	r15, 0
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <vfprintf+0x320>
    1d0a:	1e 15       	cp	r17, r14
    1d0c:	10 f0       	brcs	.+4      	; 0x1d12 <vfprintf+0x30a>
    1d0e:	9d 2c       	mov	r9, r13
    1d10:	0b c0       	rjmp	.+22     	; 0x1d28 <vfprintf+0x320>
    1d12:	9d 2c       	mov	r9, r13
    1d14:	9e 0c       	add	r9, r14
    1d16:	91 1a       	sub	r9, r17
    1d18:	1e 2d       	mov	r17, r14
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <vfprintf+0x320>
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	b3 01       	movw	r22, r6
    1d22:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1d26:	1f 5f       	subi	r17, 0xFF	; 255
    1d28:	1e 15       	cp	r17, r14
    1d2a:	c0 f3       	brcs	.-16     	; 0x1d1c <vfprintf+0x314>
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <vfprintf+0x32e>
    1d2e:	1e 15       	cp	r17, r14
    1d30:	10 f4       	brcc	.+4      	; 0x1d36 <vfprintf+0x32e>
    1d32:	e1 1a       	sub	r14, r17
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <vfprintf+0x330>
    1d36:	ee 24       	eor	r14, r14
    1d38:	04 ff       	sbrs	r16, 4
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <vfprintf+0x352>
    1d3c:	80 e3       	ldi	r24, 0x30	; 48
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	b3 01       	movw	r22, r6
    1d42:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1d46:	02 ff       	sbrs	r16, 2
    1d48:	1d c0       	rjmp	.+58     	; 0x1d84 <vfprintf+0x37c>
    1d4a:	01 fd       	sbrc	r16, 1
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <vfprintf+0x34c>
    1d4e:	88 e7       	ldi	r24, 0x78	; 120
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <vfprintf+0x368>
    1d54:	88 e5       	ldi	r24, 0x58	; 88
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0b c0       	rjmp	.+22     	; 0x1d70 <vfprintf+0x368>
    1d5a:	80 2f       	mov	r24, r16
    1d5c:	86 78       	andi	r24, 0x86	; 134
    1d5e:	91 f0       	breq	.+36     	; 0x1d84 <vfprintf+0x37c>
    1d60:	01 ff       	sbrs	r16, 1
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <vfprintf+0x360>
    1d64:	8b e2       	ldi	r24, 0x2B	; 43
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <vfprintf+0x362>
    1d68:	80 e2       	ldi	r24, 0x20	; 32
    1d6a:	f7 fc       	sbrc	r15, 7
    1d6c:	8d e2       	ldi	r24, 0x2D	; 45
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	b3 01       	movw	r22, r6
    1d72:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <vfprintf+0x37c>
    1d78:	80 e3       	ldi	r24, 0x30	; 48
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	b3 01       	movw	r22, r6
    1d7e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1d82:	9a 94       	dec	r9
    1d84:	d9 14       	cp	r13, r9
    1d86:	c0 f3       	brcs	.-16     	; 0x1d78 <vfprintf+0x370>
    1d88:	da 94       	dec	r13
    1d8a:	f1 01       	movw	r30, r2
    1d8c:	ed 0d       	add	r30, r13
    1d8e:	f1 1d       	adc	r31, r1
    1d90:	80 81       	ld	r24, Z
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	b3 01       	movw	r22, r6
    1d96:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1d9a:	dd 20       	and	r13, r13
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <vfprintf+0x380>
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <vfprintf+0x3a4>
    1da0:	80 e2       	ldi	r24, 0x20	; 32
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	b3 01       	movw	r22, r6
    1da6:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <fputc>
    1daa:	ea 94       	dec	r14
    1dac:	ee 20       	and	r14, r14
    1dae:	c1 f7       	brne	.-16     	; 0x1da0 <vfprintf+0x398>
    1db0:	43 ce       	rjmp	.-890    	; 0x1a38 <vfprintf+0x30>
    1db2:	f3 01       	movw	r30, r6
    1db4:	66 81       	ldd	r22, Z+6	; 0x06
    1db6:	77 81       	ldd	r23, Z+7	; 0x07
    1db8:	cb 01       	movw	r24, r22
    1dba:	2b 96       	adiw	r28, 0x0b	; 11
    1dbc:	e2 e1       	ldi	r30, 0x12	; 18
    1dbe:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__epilogue_restores__>

00001dc2 <strnlen_P>:
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	05 90       	lpm	r0, Z+
    1dc6:	61 50       	subi	r22, 0x01	; 1
    1dc8:	70 40       	sbci	r23, 0x00	; 0
    1dca:	01 10       	cpse	r0, r1
    1dcc:	d8 f7       	brcc	.-10     	; 0x1dc4 <strnlen_P+0x2>
    1dce:	80 95       	com	r24
    1dd0:	90 95       	com	r25
    1dd2:	8e 0f       	add	r24, r30
    1dd4:	9f 1f       	adc	r25, r31
    1dd6:	08 95       	ret

00001dd8 <strnlen>:
    1dd8:	fc 01       	movw	r30, r24
    1dda:	61 50       	subi	r22, 0x01	; 1
    1ddc:	70 40       	sbci	r23, 0x00	; 0
    1dde:	01 90       	ld	r0, Z+
    1de0:	01 10       	cpse	r0, r1
    1de2:	d8 f7       	brcc	.-10     	; 0x1dda <strnlen+0x2>
    1de4:	80 95       	com	r24
    1de6:	90 95       	com	r25
    1de8:	8e 0f       	add	r24, r30
    1dea:	9f 1f       	adc	r25, r31
    1dec:	08 95       	ret

00001dee <fputc>:
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	8c 01       	movw	r16, r24
    1df8:	eb 01       	movw	r28, r22
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	81 ff       	sbrs	r24, 1
    1dfe:	1b c0       	rjmp	.+54     	; 0x1e36 <fputc+0x48>
    1e00:	82 ff       	sbrs	r24, 2
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <fputc+0x30>
    1e04:	2e 81       	ldd	r18, Y+6	; 0x06
    1e06:	3f 81       	ldd	r19, Y+7	; 0x07
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	28 17       	cp	r18, r24
    1e0e:	39 07       	cpc	r19, r25
    1e10:	64 f4       	brge	.+24     	; 0x1e2a <fputc+0x3c>
    1e12:	e8 81       	ld	r30, Y
    1e14:	f9 81       	ldd	r31, Y+1	; 0x01
    1e16:	01 93       	st	Z+, r16
    1e18:	f9 83       	std	Y+1, r31	; 0x01
    1e1a:	e8 83       	st	Y, r30
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <fputc+0x3c>
    1e1e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e20:	f9 85       	ldd	r31, Y+9	; 0x09
    1e22:	80 2f       	mov	r24, r16
    1e24:	09 95       	icall
    1e26:	89 2b       	or	r24, r25
    1e28:	31 f4       	brne	.+12     	; 0x1e36 <fputc+0x48>
    1e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	9f 83       	std	Y+7, r25	; 0x07
    1e32:	8e 83       	std	Y+6, r24	; 0x06
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <fputc+0x4c>
    1e36:	0f ef       	ldi	r16, 0xFF	; 255
    1e38:	1f ef       	ldi	r17, 0xFF	; 255
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	08 95       	ret

00001e46 <__ultoa_invert>:
    1e46:	fa 01       	movw	r30, r20
    1e48:	aa 27       	eor	r26, r26
    1e4a:	28 30       	cpi	r18, 0x08	; 8
    1e4c:	51 f1       	breq	.+84     	; 0x1ea2 <__ultoa_invert+0x5c>
    1e4e:	20 31       	cpi	r18, 0x10	; 16
    1e50:	81 f1       	breq	.+96     	; 0x1eb2 <__ultoa_invert+0x6c>
    1e52:	e8 94       	clt
    1e54:	6f 93       	push	r22
    1e56:	6e 7f       	andi	r22, 0xFE	; 254
    1e58:	6e 5f       	subi	r22, 0xFE	; 254
    1e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	af 4f       	sbci	r26, 0xFF	; 255
    1e62:	b1 e0       	ldi	r27, 0x01	; 1
    1e64:	3e d0       	rcall	.+124    	; 0x1ee2 <__ultoa_invert+0x9c>
    1e66:	b4 e0       	ldi	r27, 0x04	; 4
    1e68:	3c d0       	rcall	.+120    	; 0x1ee2 <__ultoa_invert+0x9c>
    1e6a:	67 0f       	add	r22, r23
    1e6c:	78 1f       	adc	r23, r24
    1e6e:	89 1f       	adc	r24, r25
    1e70:	9a 1f       	adc	r25, r26
    1e72:	a1 1d       	adc	r26, r1
    1e74:	68 0f       	add	r22, r24
    1e76:	79 1f       	adc	r23, r25
    1e78:	8a 1f       	adc	r24, r26
    1e7a:	91 1d       	adc	r25, r1
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	6a 0f       	add	r22, r26
    1e80:	71 1d       	adc	r23, r1
    1e82:	81 1d       	adc	r24, r1
    1e84:	91 1d       	adc	r25, r1
    1e86:	a1 1d       	adc	r26, r1
    1e88:	20 d0       	rcall	.+64     	; 0x1eca <__ultoa_invert+0x84>
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <__ultoa_invert+0x48>
    1e8c:	68 94       	set
    1e8e:	3f 91       	pop	r19
    1e90:	2a e0       	ldi	r18, 0x0A	; 10
    1e92:	26 9f       	mul	r18, r22
    1e94:	11 24       	eor	r1, r1
    1e96:	30 19       	sub	r19, r0
    1e98:	30 5d       	subi	r19, 0xD0	; 208
    1e9a:	31 93       	st	Z+, r19
    1e9c:	de f6       	brtc	.-74     	; 0x1e54 <__ultoa_invert+0xe>
    1e9e:	cf 01       	movw	r24, r30
    1ea0:	08 95       	ret
    1ea2:	46 2f       	mov	r20, r22
    1ea4:	47 70       	andi	r20, 0x07	; 7
    1ea6:	40 5d       	subi	r20, 0xD0	; 208
    1ea8:	41 93       	st	Z+, r20
    1eaa:	b3 e0       	ldi	r27, 0x03	; 3
    1eac:	0f d0       	rcall	.+30     	; 0x1ecc <__ultoa_invert+0x86>
    1eae:	c9 f7       	brne	.-14     	; 0x1ea2 <__ultoa_invert+0x5c>
    1eb0:	f6 cf       	rjmp	.-20     	; 0x1e9e <__ultoa_invert+0x58>
    1eb2:	46 2f       	mov	r20, r22
    1eb4:	4f 70       	andi	r20, 0x0F	; 15
    1eb6:	40 5d       	subi	r20, 0xD0	; 208
    1eb8:	4a 33       	cpi	r20, 0x3A	; 58
    1eba:	18 f0       	brcs	.+6      	; 0x1ec2 <__ultoa_invert+0x7c>
    1ebc:	49 5d       	subi	r20, 0xD9	; 217
    1ebe:	31 fd       	sbrc	r19, 1
    1ec0:	40 52       	subi	r20, 0x20	; 32
    1ec2:	41 93       	st	Z+, r20
    1ec4:	02 d0       	rcall	.+4      	; 0x1eca <__ultoa_invert+0x84>
    1ec6:	a9 f7       	brne	.-22     	; 0x1eb2 <__ultoa_invert+0x6c>
    1ec8:	ea cf       	rjmp	.-44     	; 0x1e9e <__ultoa_invert+0x58>
    1eca:	b4 e0       	ldi	r27, 0x04	; 4
    1ecc:	a6 95       	lsr	r26
    1ece:	97 95       	ror	r25
    1ed0:	87 95       	ror	r24
    1ed2:	77 95       	ror	r23
    1ed4:	67 95       	ror	r22
    1ed6:	ba 95       	dec	r27
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__ultoa_invert+0x86>
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	61 05       	cpc	r22, r1
    1ede:	71 05       	cpc	r23, r1
    1ee0:	08 95       	ret
    1ee2:	9b 01       	movw	r18, r22
    1ee4:	ac 01       	movw	r20, r24
    1ee6:	0a 2e       	mov	r0, r26
    1ee8:	06 94       	lsr	r0
    1eea:	57 95       	ror	r21
    1eec:	47 95       	ror	r20
    1eee:	37 95       	ror	r19
    1ef0:	27 95       	ror	r18
    1ef2:	ba 95       	dec	r27
    1ef4:	c9 f7       	brne	.-14     	; 0x1ee8 <__ultoa_invert+0xa2>
    1ef6:	62 0f       	add	r22, r18
    1ef8:	73 1f       	adc	r23, r19
    1efa:	84 1f       	adc	r24, r20
    1efc:	95 1f       	adc	r25, r21
    1efe:	a0 1d       	adc	r26, r0
    1f00:	08 95       	ret

00001f02 <_exit>:
    1f02:	f8 94       	cli

00001f04 <__stop_program>:
    1f04:	ff cf       	rjmp	.-2      	; 0x1f04 <__stop_program>
